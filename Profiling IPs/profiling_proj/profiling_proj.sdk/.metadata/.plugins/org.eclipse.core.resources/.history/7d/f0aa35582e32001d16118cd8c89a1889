/*
 * scheduler.c
 *
 *  Created on: Sep 9, 2022
 *      Author: ekarabu
 */

#include "scheduler.h"

void scheduling()
{

    u32 Status = PR_Init();
    if (Status != XST_SUCCESS)
    {
    	xil_printf("error in ICAP \n");
    }
    workload aes_load,fft_load,sha_load;
    aes_256_operation_profile	(&aes_load);
    xil_printf("aes latency %u\n",aes_load.latency);
    fft_operation_profile	(&fft_load);
    xil_printf("fft latency %u\n",fft_load.latency);
    //bfs_operation		();
    //gemm_operation		();
    //kmp_operation		();
    //sort_operation		();
    //spmv_operation		();
    sha_operation_profile	(&sha_load);
    xil_printf("sha latency %u\n",sha_load.latency);
    aes_load.demandedResource =	1;
    fft_load.demandedResource =	4;
    sha_load.demandedResource =	3;
    totalSlot=6;
    interval =0;
    remainingSlot=6;
    workload IPs[3];
    int j;
    for(j=0;j<3;j++)
    {
    	IPs[j].successRate = 0;
    }
    IPs[0].demandedResource = aes_load.demandedResource;
    IPs[1].demandedResource = fft_load.demandedResource;
    IPs[2].demandedResource = sha_load.demandedResource;
    while(interval<18)
    {
    	int least_IP, highest_IP;
    	int highest_priority = find_highest_priority (IPs,3, &highest_IP);
    	int least_priority = find_least_priority (IPs,3, &least_IP);
    	int next=1;

    	do{

    		if (remainingSlot <= IPs[highest_IP].demandedResource)
    		{
    			next=find_next_priority (IPs,3, least_IP, least_priority, highest_IP, highest_priority, &highest_IP, &highest_priority);
    		}
    		else
    		{
    			remainingSlot = remainingSlot - IPs[highest_IP].demandedResource;
    			IPs[highest_IP].successRate++;
    		}


    	}
    	while(next);
    	remainingSlot=6;
    	interval++;
    }


}

int find_highest_priority (workload  row[], int length, int *IP_order){
	int j;
	int priority = row[0].successRate;
	int order = 0;
	for(j=1;j<length;j++) // find the highest priority in the order
	{
	    if (priority > (row[j].successRate))
	    {
	    	priority =row[j].successRate;
	    	order = j;
	    }
	}
	*IP_order = order;
	return priority;
}

int find_least_priority (workload  row[], int length, int *IP_order){
	int j;
	int priority = row[0].successRate;
	int order = 0;
	for(j=1;j<length;j++) // find the highest priority in the order
	{
	    if (priority < (row[j].successRate))
	    {
	    	priority =row[j].successRate;
	    	order = j;
	    }
	}
	*IP_order = order;
	return priority;
}

//[5 2 1]

int find_next_priority (workload  row[], int length, int least_IP, int least_priority, int current_order, int current_priorty, int *IP_order, int *IP_priority){
	int j;
	int priority = least_priority;
	int order = least_IP;
	for(j=0;j<length;j++) // find the highest priority in the order
	{
	    if ((priority <= row[j].successRate) && (priority >= current_priorty) && (current_order != order))
	    {
	    	priority =row[j].successRate;
	    	order = j;
	    }
	}
	*IP_order = order;
	*IP_priority = priority;
	if ((priority == current_priorty) && (current_order == order))
		return 0;
	else
		return 1;
}
