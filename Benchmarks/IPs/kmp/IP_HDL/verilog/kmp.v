// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kmp_kmp,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.626500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=20,HLS_SYN_DSP=0,HLS_SYN_FF=680,HLS_SYN_LUT=968,HLS_VERSION=2020_2}" *)

module custom_IP (
        s_axi_clk,
        s_axi_rst_n,
        s_axi_BUS_A_AWVALID,
        s_axi_BUS_A_AWREADY,
        s_axi_BUS_A_AWADDR,
        s_axi_BUS_A_WVALID,
        s_axi_BUS_A_WREADY,
        s_axi_BUS_A_WDATA,
        s_axi_BUS_A_WSTRB,
        s_axi_BUS_A_ARVALID,
        s_axi_BUS_A_ARREADY,
        s_axi_BUS_A_ARADDR,
        s_axi_BUS_A_RVALID,
        s_axi_BUS_A_RREADY,
        s_axi_BUS_A_RDATA,
        s_axi_BUS_A_RRESP,
        s_axi_BUS_A_BVALID,
        s_axi_BUS_A_BREADY,
        s_axi_BUS_A_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_pp1_stage0 = 13'd256;
parameter    ap_ST_fsm_pp1_stage1 = 13'd512;
parameter    ap_ST_fsm_state12 = 13'd1024;
parameter    ap_ST_fsm_state13 = 13'd2048;
parameter    ap_ST_fsm_state14 = 13'd4096;
parameter    C_S_AXI_BUS_A_DATA_WIDTH = 32;
parameter    C_S_AXI_BUS_A_ADDR_WIDTH = 16;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_BUS_A_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   s_axi_clk;
input   s_axi_rst_n;
input   s_axi_BUS_A_AWVALID;
output   s_axi_BUS_A_AWREADY;
input  [31:0] s_axi_BUS_A_AWADDR;
input   s_axi_BUS_A_WVALID;
output   s_axi_BUS_A_WREADY;
input  [C_S_AXI_BUS_A_DATA_WIDTH - 1:0] s_axi_BUS_A_WDATA;
input  [C_S_AXI_BUS_A_WSTRB_WIDTH - 1:0] s_axi_BUS_A_WSTRB;
input   s_axi_BUS_A_ARVALID;
output   s_axi_BUS_A_ARREADY;
input  [31:0] s_axi_BUS_A_ARADDR;
output   s_axi_BUS_A_RVALID;
input   s_axi_BUS_A_RREADY;
output  [C_S_AXI_BUS_A_DATA_WIDTH - 1:0] s_axi_BUS_A_RDATA;
output  [1:0] s_axi_BUS_A_RRESP;
output   s_axi_BUS_A_BVALID;
input   s_axi_BUS_A_BREADY;
output  [1:0] s_axi_BUS_A_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [1:0] pattern_address0;
reg    pattern_ce0;
wire   [7:0] pattern_q0;
wire   [14:0] input_r_address0;
reg    input_r_ce0;
wire   [7:0] input_r_q0;
reg   [1:0] kmpNext_address0;
reg    kmpNext_ce0;
reg    kmpNext_we0;
reg   [31:0] kmpNext_d0;
wire   [31:0] kmpNext_q0;
reg   [31:0] n_matches;
reg    n_matches_ap_vld;
reg   [31:0] q_1_reg_249;
reg   [31:0] reg_277;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_state9_pp1_stage0_iter0;
wire    ap_block_state11_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln40_reg_506;
reg   [0:0] icmp_ln40_1_reg_521;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln12_fu_283_p2;
reg   [1:0] kmpNext_addr_1_reg_442;
reg   [7:0] pattern_load_reg_454;
wire   [0:0] icmp_ln13_fu_300_p2;
reg   [0:0] icmp_ln13_reg_460;
wire    ap_CS_fsm_state4;
reg   [7:0] pattern_load_1_reg_470;
wire    ap_CS_fsm_state5;
wire   [2:0] add_ln12_fu_321_p2;
wire    ap_CS_fsm_state6;
wire   [31:0] k_3_fu_337_p3;
wire   [14:0] add_ln39_fu_346_p2;
reg   [14:0] add_ln39_reg_488;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln39_fu_352_p2;
reg   [7:0] input_load_reg_501;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln40_fu_363_p2;
wire   [63:0] idxprom8_fu_369_p1;
reg   [63:0] idxprom8_reg_510;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] grp_fu_272_p2;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_state10_pp1_stage1_iter0;
wire    ap_block_pp1_stage1_11001;
wire    ap_CS_fsm_state12;
wire   [31:0] q_4_fu_380_p3;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln46_fu_402_p2;
reg   [0:0] icmp_ln46_reg_540;
wire    ap_block_pp1_stage1_subdone;
reg    ap_predicate_tran10to12_state10;
reg    ap_condition_pp1_exit_iter0_state10;
reg   [2:0] q_reg_191;
reg   [31:0] k_reg_203;
reg   [31:0] k_1_reg_215;
wire   [0:0] and_ln13_fu_316_p2;
reg   [14:0] i_reg_226;
wire    ap_CS_fsm_state14;
reg   [31:0] ap_phi_mux_q_3_phi_fu_264_p4;
reg   [31:0] q_2_reg_237;
reg   [31:0] ap_phi_mux_q_1_phi_fu_252_p4;
wire    ap_block_pp1_stage0;
reg   [31:0] q_3_reg_260;
wire   [63:0] zext_ln12_fu_289_p1;
wire   [63:0] zext_ln16_fu_306_p1;
wire   [63:0] zext_ln39_fu_358_p1;
wire    ap_block_pp1_stage1;
wire   [63:0] zext_ln48_fu_424_p1;
reg   [31:0] empty_20_fu_90;
wire   [31:0] add_ln47_fu_411_p2;
wire   [0:0] icmp_ln13_1_fu_311_p2;
wire   [0:0] icmp_ln16_fu_327_p2;
wire   [31:0] add_ln17_fu_331_p2;
wire   [31:0] add_ln44_fu_374_p2;
wire   [29:0] tmp_fu_392_p4;
wire   [1:0] trunc_ln33_fu_388_p1;
wire   [1:0] add_ln48_fu_418_p2;
reg   [12:0] ap_NS_fsm;
wire    ap_block_pp1_stage0_subdone;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;
wire   [31:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

kmp_BUS_A_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_BUS_A_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_BUS_A_DATA_WIDTH ))
BUS_A_s_axi_U(
    .AWVALID(s_axi_BUS_A_AWVALID),
    .AWREADY(s_axi_BUS_A_AWREADY),
    .AWADDR(s_axi_BUS_A_AWADDR),
    .WVALID(s_axi_BUS_A_WVALID),
    .WREADY(s_axi_BUS_A_WREADY),
    .WDATA(s_axi_BUS_A_WDATA),
    .WSTRB(s_axi_BUS_A_WSTRB),
    .ARVALID(s_axi_BUS_A_ARVALID),
    .ARREADY(s_axi_BUS_A_ARREADY),
    .ARADDR(s_axi_BUS_A_ARADDR),
    .RVALID(s_axi_BUS_A_RVALID),
    .RREADY(s_axi_BUS_A_RREADY),
    .RDATA(s_axi_BUS_A_RDATA),
    .RRESP(s_axi_BUS_A_RRESP),
    .BVALID(s_axi_BUS_A_BVALID),
    .BREADY(s_axi_BUS_A_BREADY),
    .BRESP(s_axi_BUS_A_BRESP),
    .ACLK(s_axi_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(32'd0),
    .pattern_address0(pattern_address0),
    .pattern_ce0(pattern_ce0),
    .pattern_q0(pattern_q0),
    .kmpNext_address0(kmpNext_address0),
    .kmpNext_ce0(kmpNext_ce0),
    .kmpNext_we0(kmpNext_we0),
    .kmpNext_d0(kmpNext_d0),
    .kmpNext_q0(kmpNext_q0),
    .n_matches(n_matches),
    .n_matches_ap_vld(n_matches_ap_vld),
    .input_r_address0(input_r_address0),
    .input_r_ce0(input_r_ce0),
    .input_r_q0(input_r_q0)
);

always @ (posedge s_axi_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge s_axi_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge s_axi_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state10);
        end else if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge s_axi_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln12_fu_283_p2 == 1'd1))) begin
        empty_20_fu_90 <= 32'd0;
    end else if (((icmp_ln46_fu_402_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        empty_20_fu_90 <= add_ln47_fu_411_p2;
    end
end

always @ (posedge s_axi_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln12_fu_283_p2 == 1'd1))) begin
        i_reg_226 <= 15'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        i_reg_226 <= add_ln39_reg_488;
    end
end

always @ (posedge s_axi_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == and_ln13_fu_316_p2))) begin
        k_1_reg_215 <= reg_277;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        k_1_reg_215 <= k_reg_203;
    end
end

always @ (posedge s_axi_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_203 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        k_reg_203 <= k_3_fu_337_p3;
    end
end

always @ (posedge s_axi_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln40_1_reg_521 == 1'd0) & (icmp_ln40_reg_506 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        q_1_reg_249 <= kmpNext_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        q_1_reg_249 <= q_2_reg_237;
    end
end

always @ (posedge s_axi_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln12_fu_283_p2 == 1'd1))) begin
        q_2_reg_237 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        q_2_reg_237 <= ap_phi_mux_q_3_phi_fu_264_p4;
    end
end

always @ (posedge s_axi_clk) begin
    if (((icmp_ln46_fu_402_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        q_3_reg_260 <= q_4_fu_380_p3;
    end else if (((icmp_ln46_reg_540 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        q_3_reg_260 <= kmpNext_q0;
    end
end

always @ (posedge s_axi_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        q_reg_191 <= 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        q_reg_191 <= add_ln12_fu_321_p2;
    end
end

always @ (posedge s_axi_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln39_reg_488 <= add_ln39_fu_346_p2;
    end
end

always @ (posedge s_axi_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        icmp_ln13_reg_460 <= icmp_ln13_fu_300_p2;
    end
end

always @ (posedge s_axi_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln40_reg_506 == 1'd1) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        icmp_ln40_1_reg_521 <= grp_fu_272_p2;
    end
end

always @ (posedge s_axi_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln40_reg_506 <= icmp_ln40_fu_363_p2;
    end
end

always @ (posedge s_axi_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        icmp_ln46_reg_540 <= icmp_ln46_fu_402_p2;
    end
end

always @ (posedge s_axi_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        idxprom8_reg_510[31 : 0] <= idxprom8_fu_369_p1[31 : 0];
    end
end

always @ (posedge s_axi_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_load_reg_501 <= input_r_q0;
    end
end

always @ (posedge s_axi_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln12_fu_283_p2 == 1'd0))) begin
        kmpNext_addr_1_reg_442 <= zext_ln12_fu_289_p1;
    end
end

always @ (posedge s_axi_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        pattern_load_1_reg_470 <= pattern_q0;
    end
end

always @ (posedge s_axi_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        pattern_load_reg_454 <= pattern_q0;
    end
end

always @ (posedge s_axi_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln40_1_reg_521 == 1'd0) & (icmp_ln40_reg_506 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1)))) begin
        reg_277 <= kmpNext_q0;
    end
end

always @ (*) begin
    if ((ap_predicate_tran10to12_state10 == 1'b1)) begin
        ap_condition_pp1_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln39_fu_352_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln40_1_reg_521 == 1'd0) & (icmp_ln40_reg_506 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_q_1_phi_fu_252_p4 = kmpNext_q0;
    end else begin
        ap_phi_mux_q_1_phi_fu_252_p4 = q_1_reg_249;
    end
end

always @ (*) begin
    if (((icmp_ln46_reg_540 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_phi_mux_q_3_phi_fu_264_p4 = kmpNext_q0;
    end else begin
        ap_phi_mux_q_3_phi_fu_264_p4 = q_3_reg_260;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln39_fu_352_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        kmpNext_address0 = zext_ln48_fu_424_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage1))) begin
        kmpNext_address0 = idxprom8_reg_510;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        kmpNext_address0 = kmpNext_addr_1_reg_442;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kmpNext_address0 = zext_ln12_fu_289_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        kmpNext_address0 = 64'd0;
    end else begin
        kmpNext_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        kmpNext_ce0 = 1'b1;
    end else begin
        kmpNext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        kmpNext_d0 = k_3_fu_337_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        kmpNext_d0 = 32'd0;
    end else begin
        kmpNext_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        kmpNext_we0 = 1'b1;
    end else begin
        kmpNext_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln46_fu_402_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        n_matches = add_ln47_fu_411_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        n_matches = 32'd0;
    end else begin
        n_matches = 'bx;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln46_fu_402_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13)))) begin
        n_matches_ap_vld = 1'b1;
    end else begin
        n_matches_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        pattern_address0 = idxprom8_reg_510;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        pattern_address0 = idxprom8_fu_369_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        pattern_address0 = zext_ln16_fu_306_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        pattern_address0 = zext_ln12_fu_289_p1;
    end else begin
        pattern_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        pattern_ce0 = 1'b1;
    end else begin
        pattern_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln12_fu_283_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == and_ln13_fu_316_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln39_fu_352_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((~((ap_predicate_tran10to12_state10 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage1_subdone)) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_predicate_tran10to12_state10 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln12_fu_321_p2 = (q_reg_191 + 3'd1);

assign add_ln17_fu_331_p2 = (k_1_reg_215 + 32'd1);

assign add_ln39_fu_346_p2 = (i_reg_226 + 15'd1);

assign add_ln44_fu_374_p2 = (q_1_reg_249 + 32'd1);

assign add_ln47_fu_411_p2 = (empty_20_fu_90 + 32'd1);

assign add_ln48_fu_418_p2 = ($signed(trunc_ln33_fu_388_p1) + $signed(2'd3));

assign and_ln13_fu_316_p2 = (icmp_ln13_reg_460 & icmp_ln13_1_fu_311_p2);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_predicate_tran10to12_state10 = ((grp_fu_272_p2 == 1'd1) | (icmp_ln40_reg_506 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~s_axi_rst_n;
end

assign grp_fu_272_p2 = ((pattern_q0 == input_load_reg_501) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_283_p2 = ((q_reg_191 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln13_1_fu_311_p2 = ((pattern_q0 != pattern_load_reg_454) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_300_p2 = (($signed(k_1_reg_215) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_327_p2 = ((pattern_load_1_reg_470 == pattern_load_reg_454) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_352_p2 = ((i_reg_226 == 15'd32411) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_363_p2 = (($signed(ap_phi_mux_q_1_phi_fu_252_p4) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_402_p2 = (($signed(tmp_fu_392_p4) > $signed(30'd0)) ? 1'b1 : 1'b0);

assign idxprom8_fu_369_p1 = ap_phi_mux_q_1_phi_fu_252_p4;

assign input_r_address0 = zext_ln39_fu_358_p1;

assign k_3_fu_337_p3 = ((icmp_ln16_fu_327_p2[0:0] == 1'b1) ? add_ln17_fu_331_p2 : k_1_reg_215);

assign q_4_fu_380_p3 = ((grp_fu_272_p2[0:0] == 1'b1) ? add_ln44_fu_374_p2 : q_1_reg_249);

assign tmp_fu_392_p4 = {{q_4_fu_380_p3[31:2]}};

assign trunc_ln33_fu_388_p1 = q_4_fu_380_p3[1:0];

assign zext_ln12_fu_289_p1 = q_reg_191;

assign zext_ln16_fu_306_p1 = k_1_reg_215;

assign zext_ln39_fu_358_p1 = i_reg_226;

assign zext_ln48_fu_424_p1 = add_ln48_fu_418_p2;

always @ (posedge s_axi_clk) begin
    idxprom8_reg_510[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //kmp
