-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bbgemm is
generic (
    C_S_AXI_BUS_A_ADDR_WIDTH : INTEGER := 17;
    C_S_AXI_BUS_A_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_BUS_A_AWVALID : IN STD_LOGIC;
    s_axi_BUS_A_AWREADY : OUT STD_LOGIC;
    s_axi_BUS_A_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_A_ADDR_WIDTH-1 downto 0);
    s_axi_BUS_A_WVALID : IN STD_LOGIC;
    s_axi_BUS_A_WREADY : OUT STD_LOGIC;
    s_axi_BUS_A_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_A_DATA_WIDTH-1 downto 0);
    s_axi_BUS_A_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_A_DATA_WIDTH/8-1 downto 0);
    s_axi_BUS_A_ARVALID : IN STD_LOGIC;
    s_axi_BUS_A_ARREADY : OUT STD_LOGIC;
    s_axi_BUS_A_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_A_ADDR_WIDTH-1 downto 0);
    s_axi_BUS_A_RVALID : OUT STD_LOGIC;
    s_axi_BUS_A_RREADY : IN STD_LOGIC;
    s_axi_BUS_A_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_BUS_A_DATA_WIDTH-1 downto 0);
    s_axi_BUS_A_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_BUS_A_BVALID : OUT STD_LOGIC;
    s_axi_BUS_A_BREADY : IN STD_LOGIC;
    s_axi_BUS_A_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of bbgemm is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bbgemm_bbgemm,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.339000,HLS_SYN_LAT=557065,HLS_SYN_TPT=none,HLS_SYN_MEM=48,HLS_SYN_DSP=0,HLS_SYN_FF=2290,HLS_SYN_LUT=3032,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv14_1000 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_const_lv11_200 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv12_7 : STD_LOGIC_VECTOR (11 downto 0) := "000000000111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv12_6 : STD_LOGIC_VECTOR (11 downto 0) := "000000000110";
    constant ap_const_lv12_5 : STD_LOGIC_VECTOR (11 downto 0) := "000000000101";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_const_lv12_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000011";
    constant ap_const_lv12_4 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal m1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal m1_ce0 : STD_LOGIC;
    signal m1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal m2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal m2_ce0 : STD_LOGIC;
    signal m2_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal prod_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal prod_ce0 : STD_LOGIC;
    signal prod_we0 : STD_LOGIC;
    signal prod_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal prod_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten121_reg_269 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten63_reg_280 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvar_flatten_reg_291 : STD_LOGIC_VECTOR (10 downto 0);
    signal jj_reg_302 : STD_LOGIC_VECTOR (6 downto 0);
    signal kk_reg_313 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_324 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_reg_335 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_354 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state21_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal icmp_ln20_reg_985 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state22_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state23_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state24_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state8_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state25_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state9_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_state26_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state10_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state11_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal reg_358 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_state14_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal reg_362 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state12_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_state15_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal reg_366 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state13_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal grp_fu_350_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_370 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_375 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_state16_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal reg_380 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_state17_pp0_stage15_iter0 : BOOLEAN;
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal grp_fu_346_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_385 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage16 : signal is "none";
    signal ap_block_state18_pp0_stage16_iter0 : BOOLEAN;
    signal ap_block_pp0_stage16_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln20_fu_389_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln20_reg_980 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln20_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_985_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_989 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln20_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln20_reg_1001 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_1006 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln20_1_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln20_1_reg_1011 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln22_1_fu_425_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln22_1_reg_1020 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln21_1_fu_431_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_1_reg_1025 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln20_1_fu_476_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln20_1_reg_1030 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal select_ln21_3_fu_568_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln21_3_reg_1035 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln22_1_fu_617_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln22_1_reg_1040 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln22_2_fu_636_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln22_2_reg_1051 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_fu_695_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln28_reg_1061 : STD_LOGIC_VECTOR (11 downto 0);
    signal prod_addr_7_reg_1077 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln23_fu_712_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln23_reg_1082 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln22_3_fu_718_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln22_3_reg_1087 : STD_LOGIC_VECTOR (10 downto 0);
    signal m1_load_reg_1092 : STD_LOGIC_VECTOR (63 downto 0);
    signal prod_addr_6_reg_1102 : STD_LOGIC_VECTOR (11 downto 0);
    signal temp_x_fu_755_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_x_reg_1107 : STD_LOGIC_VECTOR (63 downto 0);
    signal prod_addr_5_reg_1117 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln28_7_fu_769_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln28_6_fu_778_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln28_5_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln28_fu_798_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln28_1_fu_813_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal prod_addr_reg_1167 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln28_2_fu_832_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal prod_addr_1_reg_1182 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln28_3_fu_857_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln29_7_fu_862_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal prod_addr_2_reg_1197 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln28_4_fu_877_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln29_6_fu_882_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_reg_1212 : STD_LOGIC_VECTOR (63 downto 0);
    signal prod_addr_3_reg_1217 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln29_5_fu_897_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln29_fu_912_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_reg_1232 : STD_LOGIC_VECTOR (63 downto 0);
    signal prod_addr_4_reg_1237 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln29_8_fu_917_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln29_2_fu_922_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln29_3_fu_932_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln29_4_fu_942_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln21_4_fu_952_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln21_4_reg_1262 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_2_reg_1267 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_3_reg_1272 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_4_reg_1277 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten121_phi_fu_273_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_indvar_flatten63_phi_fu_284_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_295_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_mux_jj_phi_fu_306_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_phi_mux_kk_phi_fu_317_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_i_phi_fu_328_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_k_phi_fu_339_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_fu_690_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_7_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_6_fu_631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_6_fu_740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln22_5_fu_730_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_5_fu_764_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln22_4_fu_750_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_fu_774_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln28_1_fu_788_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln28_2_fu_808_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln28_3_fu_823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal zext_ln22_7_fu_828_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal zext_ln28_4_fu_842_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_fu_852_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal zext_ln22_1_fu_872_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal zext_ln22_2_fu_892_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal zext_ln22_3_fu_907_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal bitcast_ln29_15_fu_927_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal bitcast_ln29_14_fu_937_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage15 : BOOLEAN;
    signal bitcast_ln29_13_fu_947_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage16 : BOOLEAN;
    signal bitcast_ln29_1_fu_958_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln29_9_fu_963_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln29_10_fu_968_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln29_11_fu_972_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln29_12_fu_976_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_346_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage13 : BOOLEAN;
    signal grp_fu_350_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_14_fu_441_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_445_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln20_fu_437_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln20_1_fu_466_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln21_fu_487_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln20_1_fu_472_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln29_fu_453_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln23_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln20_fu_459_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln21_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln21_fu_516_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln21_1_fu_534_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln20_2_fu_491_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln21_fu_483_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln20_3_fu_498_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal xor_ln21_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln20_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln21_1_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_fu_526_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal and_ln21_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_8_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln22_fu_575_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_16_fu_599_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_mid1_fu_603_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln29_1_fu_611_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln21_2_fu_545_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln22_7_fu_625_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln22_fu_591_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_652_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln25_fu_648_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln21_1_fu_538_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_cast6_fu_644_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln26_fu_678_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_fu_672_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_1_fu_682_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_fu_662_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln28_6_fu_701_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln22_6_fu_725_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln28_5_fu_735_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln22_5_fu_745_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln28_4_fu_759_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln28_fu_783_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln28_1_fu_803_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln28_2_fu_818_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln28_3_fu_837_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln22_1_fu_847_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln22_2_fu_867_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln22_3_fu_887_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln22_4_fu_902_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component bbgemm_dadd_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component bbgemm_dmul_64ns_64ns_64_6_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component bbgemm_BUS_A_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        m1_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        m1_ce0 : IN STD_LOGIC;
        m1_q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        m2_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        m2_ce0 : IN STD_LOGIC;
        m2_q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        prod_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        prod_ce0 : IN STD_LOGIC;
        prod_we0 : IN STD_LOGIC;
        prod_d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        prod_q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    BUS_A_s_axi_U : component bbgemm_BUS_A_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_BUS_A_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_BUS_A_DATA_WIDTH)
    port map (
        AWVALID => s_axi_BUS_A_AWVALID,
        AWREADY => s_axi_BUS_A_AWREADY,
        AWADDR => s_axi_BUS_A_AWADDR,
        WVALID => s_axi_BUS_A_WVALID,
        WREADY => s_axi_BUS_A_WREADY,
        WDATA => s_axi_BUS_A_WDATA,
        WSTRB => s_axi_BUS_A_WSTRB,
        ARVALID => s_axi_BUS_A_ARVALID,
        ARREADY => s_axi_BUS_A_ARREADY,
        ARADDR => s_axi_BUS_A_ARADDR,
        RVALID => s_axi_BUS_A_RVALID,
        RREADY => s_axi_BUS_A_RREADY,
        RDATA => s_axi_BUS_A_RDATA,
        RRESP => s_axi_BUS_A_RRESP,
        BVALID => s_axi_BUS_A_BVALID,
        BREADY => s_axi_BUS_A_BREADY,
        BRESP => s_axi_BUS_A_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        m1_address0 => m1_address0,
        m1_ce0 => m1_ce0,
        m1_q0 => m1_q0,
        m2_address0 => m2_address0,
        m2_ce0 => m2_ce0,
        m2_q0 => m2_q0,
        prod_address0 => prod_address0,
        prod_ce0 => prod_ce0,
        prod_we0 => prod_we0,
        prod_d0 => prod_d0,
        prod_q0 => prod_q0,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    dadd_64ns_64ns_64_5_full_dsp_1_U1 : component bbgemm_dadd_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_346_p0,
        din1 => grp_fu_346_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_346_p2);

    dmul_64ns_64ns_64_6_max_dsp_1_U2 : component bbgemm_dmul_64ns_64ns_64_6_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_350_p0,
        din1 => grp_fu_350_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_350_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_985_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                i_reg_324 <= select_ln22_2_reg_1051;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_324 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten121_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten121_reg_269 <= add_ln20_reg_980;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten121_reg_269 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    indvar_flatten63_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten63_reg_280 <= select_ln21_4_reg_1262;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten63_reg_280 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_291 <= select_ln22_3_reg_1087;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_291 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    jj_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_985_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                jj_reg_302 <= select_ln20_1_reg_1030;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                jj_reg_302 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    k_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_985_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                k_reg_335 <= add_ln23_reg_1082;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_reg_335 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    kk_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_985_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                kk_reg_313 <= select_ln21_3_reg_1035;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                kk_reg_313 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_985_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_2_reg_1267 <= grp_fu_346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_985_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_3_reg_1272 <= grp_fu_346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_985_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_4_reg_1277 <= grp_fu_346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln20_reg_980 <= add_ln20_fu_389_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_395_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln21_1_reg_1025 <= add_ln21_1_fu_431_p2;
                add_ln22_1_reg_1020 <= add_ln22_1_fu_425_p2;
                and_ln20_1_reg_1011 <= and_ln20_1_fu_419_p2;
                icmp_ln21_reg_989 <= icmp_ln21_fu_401_p2;
                icmp_ln22_reg_1006 <= icmp_ln22_fu_413_p2;
                xor_ln20_reg_1001 <= xor_ln20_fu_407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln23_reg_1082 <= add_ln23_fu_712_p2;
                select_ln20_1_reg_1030 <= select_ln20_1_fu_476_p3;
                select_ln21_3_reg_1035 <= select_ln21_3_fu_568_p3;
                select_ln22_2_reg_1051 <= select_ln22_2_fu_636_p3;
                select_ln22_3_reg_1087 <= select_ln22_3_fu_718_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln28_reg_1061 <= add_ln28_fu_695_p2;
                    prod_addr_7_reg_1077(11 downto 3) <= zext_ln22_6_fu_631_p1(12 - 1 downto 0)(11 downto 3);
                select_ln22_1_reg_1040 <= select_ln22_1_fu_617_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln20_reg_985 <= icmp_ln20_fu_395_p2;
                icmp_ln20_reg_985_pp0_iter1_reg <= icmp_ln20_reg_985;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                m1_load_reg_1092 <= m1_q0;
                    prod_addr_6_reg_1102(0) <= zext_ln22_5_fu_730_p1(12 - 1 downto 0)(0);    prod_addr_6_reg_1102(11 downto 3) <= zext_ln22_5_fu_730_p1(12 - 1 downto 0)(11 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                mul_1_reg_1232 <= grp_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                mul_reg_1212 <= grp_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001))) then
                    prod_addr_1_reg_1182(11 downto 1) <= zext_ln22_fu_852_p1(12 - 1 downto 0)(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001))) then
                    prod_addr_2_reg_1197(0) <= zext_ln22_1_fu_872_p1(12 - 1 downto 0)(0);    prod_addr_2_reg_1197(11 downto 2) <= zext_ln22_1_fu_872_p1(12 - 1 downto 0)(11 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001))) then
                    prod_addr_3_reg_1217(11 downto 2) <= zext_ln22_2_fu_892_p1(12 - 1 downto 0)(11 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001))) then
                    prod_addr_4_reg_1237(1 downto 0) <= zext_ln22_3_fu_907_p1(12 - 1 downto 0)(1 downto 0);    prod_addr_4_reg_1237(11 downto 3) <= zext_ln22_3_fu_907_p1(12 - 1 downto 0)(11 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                    prod_addr_5_reg_1117(1) <= zext_ln22_4_fu_750_p1(12 - 1 downto 0)(1);    prod_addr_5_reg_1117(11 downto 3) <= zext_ln22_4_fu_750_p1(12 - 1 downto 0)(11 downto 3);
                temp_x_reg_1107 <= temp_x_fu_755_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001))) then
                prod_addr_reg_1167 <= zext_ln22_7_fu_828_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                reg_354 <= m2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                reg_358 <= prod_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                reg_362 <= prod_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                reg_366 <= prod_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                reg_370 <= grp_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                reg_375 <= grp_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                reg_380 <= grp_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                reg_385 <= grp_fu_346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln21_4_reg_1262 <= select_ln21_4_fu_952_p3;
            end if;
        end if;
    end process;
    prod_addr_7_reg_1077(2 downto 0) <= "111";
    prod_addr_6_reg_1102(2 downto 1) <= "11";
    prod_addr_5_reg_1117(0) <= '1';
    prod_addr_5_reg_1117(2) <= '1';
    prod_addr_1_reg_1182(0) <= '1';
    prod_addr_2_reg_1197(1) <= '1';
    prod_addr_3_reg_1217(1 downto 0) <= "11";
    prod_addr_4_reg_1237(2) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln20_reg_985, ap_CS_fsm_pp0_stage7, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage16_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage15_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln20_reg_985 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln20_reg_985 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage7_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln20_1_fu_466_p2 <= std_logic_vector(unsigned(ap_phi_mux_jj_phi_fu_306_p4) + unsigned(ap_const_lv7_8));
    add_ln20_fu_389_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten121_phi_fu_273_p4) + unsigned(ap_const_lv16_1));
    add_ln21_1_fu_431_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten63_phi_fu_284_p4) + unsigned(ap_const_lv14_1));
    add_ln21_fu_516_p2 <= std_logic_vector(unsigned(select_ln20_fu_459_p3) + unsigned(ap_const_lv7_8));
    add_ln22_1_fu_425_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_295_p4) + unsigned(ap_const_lv11_1));
    add_ln22_fu_575_p2 <= std_logic_vector(unsigned(select_ln21_fu_526_p3) + unsigned(ap_const_lv7_1));
    add_ln23_fu_712_p2 <= std_logic_vector(unsigned(select_ln22_fu_591_p3) + unsigned(ap_const_lv4_1));
    add_ln26_1_fu_682_p3 <= (trunc_ln26_fu_678_p1 & add_ln26_fu_672_p2);
    add_ln26_fu_672_p2 <= std_logic_vector(unsigned(select_ln21_1_fu_538_p3) + unsigned(k_cast6_fu_644_p1));
    add_ln28_fu_695_p2 <= std_logic_vector(unsigned(shl_ln_fu_662_p4) + unsigned(zext_ln21_fu_483_p1));
    add_ln29_1_fu_611_p2 <= std_logic_vector(unsigned(p_mid1_fu_603_p3) + unsigned(zext_ln21_fu_483_p1));
    add_ln29_fu_453_p2 <= std_logic_vector(unsigned(tmp_3_fu_445_p3) + unsigned(zext_ln20_fu_437_p1));
    and_ln20_1_fu_419_p2 <= (xor_ln20_fu_407_p2 and icmp_ln22_fu_413_p2);
    and_ln20_fu_511_p2 <= (xor_ln20_reg_1001 and icmp_ln23_fu_505_p2);
    and_ln21_fu_562_p2 <= (or_ln21_1_fu_557_p2 and and_ln20_fu_511_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage16 <= ap_CS_fsm(17);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state27 <= ap_CS_fsm(18);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage16_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage7_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln20_reg_985)
    begin
        if ((icmp_ln20_reg_985 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_328_p4_assign_proc : process(i_reg_324, ap_enable_reg_pp0_iter1, icmp_ln20_reg_985_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, select_ln22_2_reg_1051, ap_block_pp0_stage1)
    begin
        if (((icmp_ln20_reg_985_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ap_phi_mux_i_phi_fu_328_p4 <= select_ln22_2_reg_1051;
        else 
            ap_phi_mux_i_phi_fu_328_p4 <= i_reg_324;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten121_phi_fu_273_p4_assign_proc : process(indvar_flatten121_reg_269, icmp_ln20_reg_985, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, add_ln20_reg_980, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten121_phi_fu_273_p4 <= add_ln20_reg_980;
        else 
            ap_phi_mux_indvar_flatten121_phi_fu_273_p4 <= indvar_flatten121_reg_269;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten63_phi_fu_284_p4_assign_proc : process(indvar_flatten63_reg_280, icmp_ln20_reg_985, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln21_4_reg_1262, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten63_phi_fu_284_p4 <= select_ln21_4_reg_1262;
        else 
            ap_phi_mux_indvar_flatten63_phi_fu_284_p4 <= indvar_flatten63_reg_280;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_295_p4_assign_proc : process(indvar_flatten_reg_291, icmp_ln20_reg_985, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln22_3_reg_1087, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_295_p4 <= select_ln22_3_reg_1087;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_295_p4 <= indvar_flatten_reg_291;
        end if; 
    end process;


    ap_phi_mux_jj_phi_fu_306_p4_assign_proc : process(jj_reg_302, ap_enable_reg_pp0_iter1, icmp_ln20_reg_985_pp0_iter1_reg, select_ln20_1_reg_1030, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((icmp_ln20_reg_985_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ap_phi_mux_jj_phi_fu_306_p4 <= select_ln20_1_reg_1030;
        else 
            ap_phi_mux_jj_phi_fu_306_p4 <= jj_reg_302;
        end if; 
    end process;


    ap_phi_mux_k_phi_fu_339_p4_assign_proc : process(k_reg_335, ap_enable_reg_pp0_iter1, icmp_ln20_reg_985_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, add_ln23_reg_1082, ap_block_pp0_stage1)
    begin
        if (((icmp_ln20_reg_985_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ap_phi_mux_k_phi_fu_339_p4 <= add_ln23_reg_1082;
        else 
            ap_phi_mux_k_phi_fu_339_p4 <= k_reg_335;
        end if; 
    end process;


    ap_phi_mux_kk_phi_fu_317_p4_assign_proc : process(kk_reg_313, ap_enable_reg_pp0_iter1, icmp_ln20_reg_985_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, select_ln21_3_reg_1035, ap_block_pp0_stage1)
    begin
        if (((icmp_ln20_reg_985_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ap_phi_mux_kk_phi_fu_317_p4 <= select_ln21_3_reg_1035;
        else 
            ap_phi_mux_kk_phi_fu_317_p4 <= kk_reg_313;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln28_1_fu_813_p1 <= reg_354;
    bitcast_ln28_2_fu_832_p1 <= reg_354;
    bitcast_ln28_3_fu_857_p1 <= reg_354;
    bitcast_ln28_4_fu_877_p1 <= reg_354;
    bitcast_ln28_5_fu_793_p1 <= reg_354;
    bitcast_ln28_6_fu_778_p1 <= reg_354;
    bitcast_ln28_7_fu_769_p1 <= reg_354;
    bitcast_ln28_fu_798_p1 <= reg_354;
    bitcast_ln29_10_fu_968_p1 <= add_2_reg_1267;
    bitcast_ln29_11_fu_972_p1 <= add_3_reg_1272;
    bitcast_ln29_12_fu_976_p1 <= add_4_reg_1277;
    bitcast_ln29_13_fu_947_p1 <= reg_385;
    bitcast_ln29_14_fu_937_p1 <= reg_385;
    bitcast_ln29_15_fu_927_p1 <= reg_385;
    bitcast_ln29_1_fu_958_p1 <= reg_385;
    bitcast_ln29_2_fu_922_p1 <= reg_366;
    bitcast_ln29_3_fu_932_p1 <= reg_358;
    bitcast_ln29_4_fu_942_p1 <= reg_362;
    bitcast_ln29_5_fu_897_p1 <= reg_366;
    bitcast_ln29_6_fu_882_p1 <= reg_362;
    bitcast_ln29_7_fu_862_p1 <= reg_358;
    bitcast_ln29_8_fu_917_p1 <= reg_362;
    bitcast_ln29_9_fu_963_p1 <= reg_385;
    bitcast_ln29_fu_912_p1 <= reg_358;
    empty_14_fu_441_p1 <= ap_phi_mux_i_phi_fu_328_p4(6 - 1 downto 0);
    empty_16_fu_599_p1 <= add_ln22_fu_575_p2(6 - 1 downto 0);

    grp_fu_346_p0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage16, bitcast_ln29_7_fu_862_p1, bitcast_ln29_6_fu_882_p1, bitcast_ln29_5_fu_897_p1, bitcast_ln29_fu_912_p1, bitcast_ln29_8_fu_917_p1, bitcast_ln29_2_fu_922_p1, bitcast_ln29_3_fu_932_p1, bitcast_ln29_4_fu_942_p1, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11, ap_block_pp0_stage12, ap_block_pp0_stage14, ap_block_pp0_stage15, ap_block_pp0_stage16, ap_block_pp0_stage13)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16))) then 
                grp_fu_346_p0 <= bitcast_ln29_4_fu_942_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15))) then 
                grp_fu_346_p0 <= bitcast_ln29_3_fu_932_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14))) then 
                grp_fu_346_p0 <= bitcast_ln29_2_fu_922_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13))) then 
                grp_fu_346_p0 <= bitcast_ln29_8_fu_917_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12))) then 
                grp_fu_346_p0 <= bitcast_ln29_fu_912_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11))) then 
                grp_fu_346_p0 <= bitcast_ln29_5_fu_897_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10))) then 
                grp_fu_346_p0 <= bitcast_ln29_6_fu_882_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9))) then 
                grp_fu_346_p0 <= bitcast_ln29_7_fu_862_p1;
            else 
                grp_fu_346_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_346_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_346_p1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage11, reg_370, reg_375, ap_CS_fsm_pp0_stage14, reg_380, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage16, mul_reg_1212, mul_1_reg_1232, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11, ap_block_pp0_stage12, ap_block_pp0_stage14, ap_block_pp0_stage15, ap_block_pp0_stage16, ap_block_pp0_stage13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_346_p1 <= mul_1_reg_1232;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_346_p1 <= mul_reg_1212;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_346_p1 <= reg_380;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_346_p1 <= reg_375;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_346_p1 <= reg_370;
        else 
            grp_fu_346_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_350_p0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, temp_x_fu_755_p1, temp_x_reg_1107, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_350_p0 <= temp_x_reg_1107;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_350_p0 <= temp_x_fu_755_p1;
        else 
            grp_fu_350_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_350_p1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, bitcast_ln28_7_fu_769_p1, bitcast_ln28_6_fu_778_p1, bitcast_ln28_5_fu_793_p1, bitcast_ln28_fu_798_p1, bitcast_ln28_1_fu_813_p1, bitcast_ln28_2_fu_832_p1, bitcast_ln28_3_fu_857_p1, bitcast_ln28_4_fu_877_p1, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10))) then 
                grp_fu_350_p1 <= bitcast_ln28_4_fu_877_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9))) then 
                grp_fu_350_p1 <= bitcast_ln28_3_fu_857_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8))) then 
                grp_fu_350_p1 <= bitcast_ln28_2_fu_832_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7))) then 
                grp_fu_350_p1 <= bitcast_ln28_1_fu_813_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
                grp_fu_350_p1 <= bitcast_ln28_fu_798_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
                grp_fu_350_p1 <= bitcast_ln28_5_fu_793_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
                grp_fu_350_p1 <= bitcast_ln28_6_fu_778_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                grp_fu_350_p1 <= bitcast_ln28_7_fu_769_p1;
            else 
                grp_fu_350_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_350_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln20_fu_395_p2 <= "1" when (ap_phi_mux_indvar_flatten121_phi_fu_273_p4 = ap_const_lv16_8000) else "0";
    icmp_ln21_fu_401_p2 <= "1" when (ap_phi_mux_indvar_flatten63_phi_fu_284_p4 = ap_const_lv14_1000) else "0";
    icmp_ln22_fu_413_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_295_p4 = ap_const_lv11_200) else "0";
    icmp_ln23_fu_505_p2 <= "1" when (ap_phi_mux_k_phi_fu_339_p4 = ap_const_lv4_8) else "0";
    k_cast6_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln22_fu_591_p3),6));
    m1_address0 <= zext_ln26_fu_690_p1(12 - 1 downto 0);

    m1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            m1_ce0 <= ap_const_logic_1;
        else 
            m1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    m2_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, zext_ln28_7_fu_707_p1, zext_ln28_6_fu_740_p1, ap_block_pp0_stage2, zext_ln28_5_fu_764_p1, ap_block_pp0_stage3, zext_ln28_fu_774_p1, ap_block_pp0_stage4, zext_ln28_1_fu_788_p1, ap_block_pp0_stage5, zext_ln28_2_fu_808_p1, ap_block_pp0_stage6, zext_ln28_3_fu_823_p1, ap_block_pp0_stage7, ap_block_pp0_stage8, zext_ln28_4_fu_842_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8))) then 
                m2_address0 <= zext_ln28_4_fu_842_p1(12 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7))) then 
                m2_address0 <= zext_ln28_3_fu_823_p1(12 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
                m2_address0 <= zext_ln28_2_fu_808_p1(12 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
                m2_address0 <= zext_ln28_1_fu_788_p1(12 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
                m2_address0 <= zext_ln28_fu_774_p1(12 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                m2_address0 <= zext_ln28_5_fu_764_p1(12 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                m2_address0 <= zext_ln28_6_fu_740_p1(12 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                m2_address0 <= zext_ln28_7_fu_707_p1(12 - 1 downto 0);
            else 
                m2_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            m2_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    m2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            m2_ce0 <= ap_const_logic_1;
        else 
            m2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln21_1_fu_557_p2 <= (xor_ln21_fu_552_p2 or icmp_ln21_reg_989);
    or_ln21_fu_522_p2 <= (icmp_ln21_reg_989 or and_ln20_1_reg_1011);
    or_ln22_1_fu_847_p2 <= (select_ln22_1_reg_1040 or ap_const_lv12_1);
    or_ln22_2_fu_867_p2 <= (select_ln22_1_reg_1040 or ap_const_lv12_2);
    or_ln22_3_fu_887_p2 <= (select_ln22_1_reg_1040 or ap_const_lv12_3);
    or_ln22_4_fu_902_p2 <= (select_ln22_1_reg_1040 or ap_const_lv12_4);
    or_ln22_5_fu_745_p2 <= (select_ln22_1_reg_1040 or ap_const_lv12_5);
    or_ln22_6_fu_725_p2 <= (select_ln22_1_reg_1040 or ap_const_lv12_6);
    or_ln22_7_fu_625_p2 <= (select_ln22_1_fu_617_p3 or ap_const_lv12_7);
    or_ln22_8_fu_586_p2 <= (or_ln22_fu_581_p2 or icmp_ln21_reg_989);
    or_ln22_fu_581_p2 <= (and_ln21_fu_562_p2 or and_ln20_1_reg_1011);
    or_ln28_1_fu_803_p2 <= (ap_const_lv12_2 or add_ln28_reg_1061);
    or_ln28_2_fu_818_p2 <= (ap_const_lv12_3 or add_ln28_reg_1061);
    or_ln28_3_fu_837_p2 <= (ap_const_lv12_4 or add_ln28_reg_1061);
    or_ln28_4_fu_759_p2 <= (ap_const_lv12_5 or add_ln28_reg_1061);
    or_ln28_5_fu_735_p2 <= (ap_const_lv12_6 or add_ln28_reg_1061);
    or_ln28_6_fu_701_p2 <= (ap_const_lv12_7 or add_ln28_fu_695_p2);
    or_ln28_fu_783_p2 <= (ap_const_lv12_1 or add_ln28_reg_1061);
    p_mid1_fu_603_p3 <= (empty_16_fu_599_p1 & ap_const_lv6_0);

    prod_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, prod_addr_7_reg_1077, prod_addr_6_reg_1102, prod_addr_5_reg_1117, prod_addr_reg_1167, prod_addr_1_reg_1182, prod_addr_2_reg_1197, prod_addr_3_reg_1217, prod_addr_4_reg_1237, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln22_6_fu_631_p1, ap_block_pp0_stage2, zext_ln22_5_fu_730_p1, ap_block_pp0_stage3, zext_ln22_4_fu_750_p1, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, zext_ln22_7_fu_828_p1, ap_block_pp0_stage8, zext_ln22_fu_852_p1, ap_block_pp0_stage9, zext_ln22_1_fu_872_p1, ap_block_pp0_stage10, zext_ln22_2_fu_892_p1, ap_block_pp0_stage11, zext_ln22_3_fu_907_p1, ap_block_pp0_stage12, ap_block_pp0_stage14, ap_block_pp0_stage15, ap_block_pp0_stage16)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7))) then 
            prod_address0 <= prod_addr_4_reg_1237;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
            prod_address0 <= prod_addr_3_reg_1217;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
            prod_address0 <= prod_addr_2_reg_1197;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            prod_address0 <= prod_addr_1_reg_1182;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            prod_address0 <= prod_addr_reg_1167;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            prod_address0 <= prod_addr_5_reg_1117;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            prod_address0 <= prod_addr_6_reg_1102;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            prod_address0 <= prod_addr_7_reg_1077;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            prod_address0 <= zext_ln22_3_fu_907_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            prod_address0 <= zext_ln22_2_fu_892_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            prod_address0 <= zext_ln22_1_fu_872_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            prod_address0 <= zext_ln22_fu_852_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            prod_address0 <= zext_ln22_7_fu_828_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            prod_address0 <= zext_ln22_4_fu_750_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            prod_address0 <= zext_ln22_5_fu_730_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            prod_address0 <= zext_ln22_6_fu_631_p1(12 - 1 downto 0);
        else 
            prod_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    prod_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_11001, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15_11001, ap_CS_fsm_pp0_stage16, ap_block_pp0_stage16_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            prod_ce0 <= ap_const_logic_1;
        else 
            prod_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    prod_d0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, bitcast_ln29_15_fu_927_p1, ap_block_pp0_stage14, bitcast_ln29_14_fu_937_p1, ap_block_pp0_stage15, bitcast_ln29_13_fu_947_p1, ap_block_pp0_stage16, bitcast_ln29_1_fu_958_p1, bitcast_ln29_9_fu_963_p1, bitcast_ln29_10_fu_968_p1, bitcast_ln29_11_fu_972_p1, bitcast_ln29_12_fu_976_p1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7))) then 
            prod_d0 <= bitcast_ln29_12_fu_976_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
            prod_d0 <= bitcast_ln29_11_fu_972_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
            prod_d0 <= bitcast_ln29_10_fu_968_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            prod_d0 <= bitcast_ln29_9_fu_963_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            prod_d0 <= bitcast_ln29_1_fu_958_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            prod_d0 <= bitcast_ln29_13_fu_947_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            prod_d0 <= bitcast_ln29_14_fu_937_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            prod_d0 <= bitcast_ln29_15_fu_927_p1;
        else 
            prod_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    prod_we0_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln20_reg_985, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_11001, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15_11001, ap_CS_fsm_pp0_stage16, ap_block_pp0_stage16_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln20_reg_985_pp0_iter1_reg)
    begin
        if ((((icmp_ln20_reg_985_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((icmp_ln20_reg_985_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((icmp_ln20_reg_985_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((icmp_ln20_reg_985_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (icmp_ln20_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            prod_we0 <= ap_const_logic_1;
        else 
            prod_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln20_1_fu_476_p3 <= 
        add_ln20_1_fu_466_p2 when (icmp_ln21_reg_989(0) = '1') else 
        ap_phi_mux_jj_phi_fu_306_p4;
    select_ln20_2_fu_491_p3 <= 
        ap_const_lv6_0 when (icmp_ln21_reg_989(0) = '1') else 
        trunc_ln21_fu_487_p1;
    select_ln20_3_fu_498_p3 <= 
        zext_ln20_1_fu_472_p1 when (icmp_ln21_reg_989(0) = '1') else 
        add_ln29_fu_453_p2;
    select_ln20_fu_459_p3 <= 
        ap_const_lv7_0 when (icmp_ln21_reg_989(0) = '1') else 
        ap_phi_mux_kk_phi_fu_317_p4;
    select_ln21_1_fu_538_p3 <= 
        trunc_ln21_1_fu_534_p1 when (and_ln20_1_reg_1011(0) = '1') else 
        select_ln20_2_fu_491_p3;
    select_ln21_2_fu_545_p3 <= 
        zext_ln21_fu_483_p1 when (and_ln20_1_reg_1011(0) = '1') else 
        select_ln20_3_fu_498_p3;
    select_ln21_3_fu_568_p3 <= 
        add_ln21_fu_516_p2 when (and_ln20_1_reg_1011(0) = '1') else 
        select_ln20_fu_459_p3;
    select_ln21_4_fu_952_p3 <= 
        ap_const_lv14_1 when (icmp_ln21_reg_989(0) = '1') else 
        add_ln21_1_reg_1025;
    select_ln21_fu_526_p3 <= 
        ap_const_lv7_0 when (or_ln21_fu_522_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_328_p4;
    select_ln22_1_fu_617_p3 <= 
        add_ln29_1_fu_611_p2 when (and_ln21_fu_562_p2(0) = '1') else 
        select_ln21_2_fu_545_p3;
    select_ln22_2_fu_636_p3 <= 
        add_ln22_fu_575_p2 when (and_ln21_fu_562_p2(0) = '1') else 
        select_ln21_fu_526_p3;
    select_ln22_3_fu_718_p3 <= 
        ap_const_lv11_1 when (or_ln21_fu_522_p2(0) = '1') else 
        add_ln22_1_reg_1020;
    select_ln22_fu_591_p3 <= 
        ap_const_lv4_0 when (or_ln22_8_fu_586_p2(0) = '1') else 
        ap_phi_mux_k_phi_fu_339_p4;
    shl_ln_fu_662_p4 <= ((tmp_1_fu_652_p4 & trunc_ln25_fu_648_p1) & ap_const_lv6_0);
    temp_x_fu_755_p1 <= m1_load_reg_1092;
    tmp_1_fu_652_p4 <= select_ln21_3_fu_568_p3(5 downto 3);
    tmp_3_fu_445_p3 <= (empty_14_fu_441_p1 & ap_const_lv6_0);
    trunc_ln21_1_fu_534_p1 <= add_ln21_fu_516_p2(6 - 1 downto 0);
    trunc_ln21_fu_487_p1 <= ap_phi_mux_kk_phi_fu_317_p4(6 - 1 downto 0);
    trunc_ln25_fu_648_p1 <= select_ln22_fu_591_p3(3 - 1 downto 0);
    trunc_ln26_fu_678_p1 <= select_ln22_2_fu_636_p3(6 - 1 downto 0);
    xor_ln20_fu_407_p2 <= (icmp_ln21_fu_401_p2 xor ap_const_lv1_1);
    xor_ln21_fu_552_p2 <= (icmp_ln22_reg_1006 xor ap_const_lv1_1);
    zext_ln20_1_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_1_fu_466_p2),12));
    zext_ln20_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_jj_phi_fu_306_p4),12));
    zext_ln21_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln20_1_fu_476_p3),12));
    zext_ln22_1_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_2_fu_867_p2),64));
    zext_ln22_2_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_3_fu_887_p2),64));
    zext_ln22_3_fu_907_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_4_fu_902_p2),64));
    zext_ln22_4_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_5_fu_745_p2),64));
    zext_ln22_5_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_6_fu_725_p2),64));
    zext_ln22_6_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_7_fu_625_p2),64));
    zext_ln22_7_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln22_1_reg_1040),64));
    zext_ln22_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_1_fu_847_p2),64));
    zext_ln26_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_1_fu_682_p3),64));
    zext_ln28_1_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln28_fu_783_p2),64));
    zext_ln28_2_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln28_1_fu_803_p2),64));
    zext_ln28_3_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln28_2_fu_818_p2),64));
    zext_ln28_4_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln28_3_fu_837_p2),64));
    zext_ln28_5_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln28_4_fu_759_p2),64));
    zext_ln28_6_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln28_5_fu_735_p2),64));
    zext_ln28_7_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln28_6_fu_701_p2),64));
    zext_ln28_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_reg_1061),64));
end behav;
