-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bfs is
generic (
    C_S_AXI_BUS_A_ADDR_WIDTH : INTEGER := 16;
    C_S_AXI_BUS_A_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_BUS_A_AWVALID : IN STD_LOGIC;
    s_axi_BUS_A_AWREADY : OUT STD_LOGIC;
    s_axi_BUS_A_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_A_ADDR_WIDTH-1 downto 0);
    s_axi_BUS_A_WVALID : IN STD_LOGIC;
    s_axi_BUS_A_WREADY : OUT STD_LOGIC;
    s_axi_BUS_A_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_A_DATA_WIDTH-1 downto 0);
    s_axi_BUS_A_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_A_DATA_WIDTH/8-1 downto 0);
    s_axi_BUS_A_ARVALID : IN STD_LOGIC;
    s_axi_BUS_A_ARREADY : OUT STD_LOGIC;
    s_axi_BUS_A_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_A_ADDR_WIDTH-1 downto 0);
    s_axi_BUS_A_RVALID : OUT STD_LOGIC;
    s_axi_BUS_A_RREADY : IN STD_LOGIC;
    s_axi_BUS_A_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_BUS_A_DATA_WIDTH-1 downto 0);
    s_axi_BUS_A_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_BUS_A_BVALID : OUT STD_LOGIC;
    s_axi_BUS_A_BREADY : IN STD_LOGIC;
    s_axi_BUS_A_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of bfs is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bfs_bfs,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.059000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=30,HLS_SYN_DSP=0,HLS_SYN_FF=994,HLS_SYN_LUT=1047,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal nodes_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal nodes_ce0 : STD_LOGIC;
    signal nodes_q0 : STD_LOGIC_VECTOR (127 downto 0);
    signal edges_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal edges_ce0 : STD_LOGIC;
    signal edges_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal starting_node : STD_LOGIC_VECTOR (63 downto 0);
    signal level_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal level_ce0 : STD_LOGIC;
    signal level_we0 : STD_LOGIC;
    signal level_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal level_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal level_counts_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal level_counts_ce0 : STD_LOGIC;
    signal level_counts_we0 : STD_LOGIC;
    signal level_counts_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal e_1_reg_213 : STD_LOGIC_VECTOR (63 downto 0);
    signal cnt_1_reg_224 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln27_fu_263_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln27_reg_360 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal empty_20_fu_273_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_20_reg_366 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_1_fu_279_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal n_1_reg_371 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln30_fu_291_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_reg_379 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln30_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_392 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_begin_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_end_fu_320_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_end_reg_406 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln34_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_411 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_1_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_1_reg_415 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal level_addr_2_reg_424 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state7_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal e_2_fu_341_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal e_2_reg_429 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal horizon_reg_177 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln45_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cnt_reg_189 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_cnt_3_phi_fu_251_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal n_reg_202 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_e_1_phi_fu_216_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_cnt_2_phi_fu_239_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal cnt_4_fu_353_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter1_cnt_2_reg_235 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln38_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cnt_3_reg_247 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal trunc_ln27_fu_269_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln31_fu_302_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln31_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component bfs_BUS_A_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        starting_node : OUT STD_LOGIC_VECTOR (63 downto 0);
        level_counts_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        level_counts_ce0 : IN STD_LOGIC;
        level_counts_we0 : IN STD_LOGIC;
        level_counts_d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        level_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        level_ce0 : IN STD_LOGIC;
        level_we0 : IN STD_LOGIC;
        level_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        level_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        nodes_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        nodes_ce0 : IN STD_LOGIC;
        nodes_q0 : OUT STD_LOGIC_VECTOR (127 downto 0);
        edges_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        edges_ce0 : IN STD_LOGIC;
        edges_q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    BUS_A_s_axi_U : component bfs_BUS_A_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_BUS_A_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_BUS_A_DATA_WIDTH)
    port map (
        AWVALID => s_axi_BUS_A_AWVALID,
        AWREADY => s_axi_BUS_A_AWREADY,
        AWADDR => s_axi_BUS_A_AWADDR,
        WVALID => s_axi_BUS_A_WVALID,
        WREADY => s_axi_BUS_A_WREADY,
        WDATA => s_axi_BUS_A_WDATA,
        WSTRB => s_axi_BUS_A_WSTRB,
        ARVALID => s_axi_BUS_A_ARVALID,
        ARREADY => s_axi_BUS_A_ARREADY,
        ARADDR => s_axi_BUS_A_ARADDR,
        RVALID => s_axi_BUS_A_RVALID,
        RREADY => s_axi_BUS_A_RREADY,
        RDATA => s_axi_BUS_A_RDATA,
        RRESP => s_axi_BUS_A_RRESP,
        BVALID => s_axi_BUS_A_BVALID,
        BREADY => s_axi_BUS_A_BREADY,
        BRESP => s_axi_BUS_A_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        starting_node => starting_node,
        level_counts_address0 => level_counts_address0,
        level_counts_ce0 => level_counts_ce0,
        level_counts_we0 => level_counts_we0,
        level_counts_d0 => level_counts_d0,
        level_address0 => level_address0,
        level_ce0 => level_ce0,
        level_we0 => level_we0,
        level_d0 => level_d0,
        level_q0 => level_q0,
        nodes_address0 => nodes_address0,
        nodes_ce0 => nodes_ce0,
        nodes_q0 => nodes_q0,
        edges_address0 => edges_address0,
        edges_ce0 => edges_ce0,
        edges_q0 => edges_q0,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln34_fu_330_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state7);
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln34_fu_330_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    cnt_1_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln34_fu_330_p2 = ap_const_lv1_1))) then 
                cnt_1_reg_224 <= cnt_reg_189;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln34_1_reg_415 = ap_const_lv1_0))) then 
                cnt_1_reg_224 <= ap_phi_mux_cnt_2_phi_fu_239_p4;
            end if; 
        end if;
    end process;

    cnt_3_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln34_reg_411 = ap_const_lv1_1) and (icmp_ln31_reg_392 = ap_const_lv1_1))) then 
                cnt_3_reg_247 <= cnt_1_reg_224;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln34_fu_330_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln31_fu_310_p2 = ap_const_lv1_0)))) then 
                cnt_3_reg_247 <= cnt_reg_189;
            end if; 
        end if;
    end process;

    cnt_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                cnt_reg_189 <= ap_phi_mux_cnt_3_phi_fu_251_p6;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                cnt_reg_189 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    e_1_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln34_fu_330_p2 = ap_const_lv1_1))) then 
                e_1_reg_213 <= tmp_begin_fu_316_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln34_1_reg_415 = ap_const_lv1_0))) then 
                e_1_reg_213 <= e_2_reg_429;
            end if; 
        end if;
    end process;

    horizon_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_296_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln30_fu_285_p2 = ap_const_lv1_1))) then 
                horizon_reg_177 <= add_ln27_reg_360;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                horizon_reg_177 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    n_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                n_reg_202 <= n_1_reg_371;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                n_reg_202 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln27_reg_360 <= add_ln27_fu_263_p2;
                empty_20_reg_366 <= empty_20_fu_273_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln34_1_reg_415 = ap_const_lv1_0))) then
                e_2_reg_429 <= e_2_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                icmp_ln31_reg_392 <= icmp_ln31_fu_310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln34_1_reg_415 <= icmp_ln34_1_fu_336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                icmp_ln34_reg_411 <= icmp_ln34_fu_330_p2;
                tmp_end_reg_406 <= nodes_q0(127 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln34_1_reg_415 = ap_const_lv1_0))) then
                level_addr_2_reg_424 <= edges_q0(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                n_1_reg_371 <= n_1_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln30_fu_285_p2 = ap_const_lv1_0))) then
                    zext_ln30_reg_379(8 downto 0) <= zext_ln30_fu_291_p1(8 downto 0);
            end if;
        end if;
    end process;
    zext_ln30_reg_379(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln30_fu_285_p2, icmp_ln31_fu_310_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln34_fu_330_p2, icmp_ln34_1_reg_415, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_subdone, icmp_ln45_fu_296_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln45_fu_296_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln30_fu_285_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln45_fu_296_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln30_fu_285_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln31_fu_310_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln34_fu_330_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (icmp_ln34_1_reg_415 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (icmp_ln34_1_reg_415 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln27_fu_263_p2 <= std_logic_vector(unsigned(horizon_reg_177) + unsigned(ap_const_lv64_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state7_assign_proc : process(icmp_ln34_1_reg_415)
    begin
        if ((icmp_ln34_1_reg_415 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state3, icmp_ln30_fu_285_p2, icmp_ln45_fu_296_p2)
    begin
        if (((icmp_ln45_fu_296_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln30_fu_285_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_cnt_2_phi_fu_239_p4_assign_proc : process(cnt_1_reg_224, icmp_ln34_1_reg_415, cnt_4_fu_353_p2, ap_phi_reg_pp0_iter1_cnt_2_reg_235, icmp_ln38_fu_347_p2)
    begin
        if ((icmp_ln34_1_reg_415 = ap_const_lv1_0)) then
            if ((icmp_ln38_fu_347_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_cnt_2_phi_fu_239_p4 <= cnt_1_reg_224;
            elsif ((icmp_ln38_fu_347_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_cnt_2_phi_fu_239_p4 <= cnt_4_fu_353_p2;
            else 
                ap_phi_mux_cnt_2_phi_fu_239_p4 <= ap_phi_reg_pp0_iter1_cnt_2_reg_235;
            end if;
        else 
            ap_phi_mux_cnt_2_phi_fu_239_p4 <= ap_phi_reg_pp0_iter1_cnt_2_reg_235;
        end if; 
    end process;


    ap_phi_mux_cnt_3_phi_fu_251_p6_assign_proc : process(cnt_1_reg_224, icmp_ln31_reg_392, icmp_ln34_reg_411, ap_CS_fsm_state9, cnt_3_reg_247)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln34_reg_411 = ap_const_lv1_1) and (icmp_ln31_reg_392 = ap_const_lv1_1))) then 
            ap_phi_mux_cnt_3_phi_fu_251_p6 <= cnt_1_reg_224;
        else 
            ap_phi_mux_cnt_3_phi_fu_251_p6 <= cnt_3_reg_247;
        end if; 
    end process;


    ap_phi_mux_e_1_phi_fu_216_p4_assign_proc : process(e_1_reg_213, icmp_ln34_1_reg_415, ap_CS_fsm_pp0_stage0, e_2_reg_429, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln34_1_reg_415 = ap_const_lv1_0))) then 
            ap_phi_mux_e_1_phi_fu_216_p4 <= e_2_reg_429;
        else 
            ap_phi_mux_e_1_phi_fu_216_p4 <= e_1_reg_213;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_cnt_2_reg_235 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln30_fu_285_p2, icmp_ln45_fu_296_p2)
    begin
        if (((icmp_ln45_fu_296_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln30_fu_285_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    cnt_4_fu_353_p2 <= std_logic_vector(unsigned(cnt_1_reg_224) + unsigned(ap_const_lv64_1));
    e_2_fu_341_p2 <= std_logic_vector(unsigned(e_1_reg_213) + unsigned(ap_const_lv64_1));
    edges_address0 <= ap_phi_mux_e_1_phi_fu_216_p4(12 - 1 downto 0);

    edges_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            edges_ce0 <= ap_const_logic_1;
        else 
            edges_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_20_fu_273_p2 <= std_logic_vector(unsigned(trunc_ln27_fu_269_p1) + unsigned(ap_const_lv8_1));
    icmp_ln30_fu_285_p2 <= "1" when (n_reg_202 = ap_const_lv9_100) else "0";
    icmp_ln31_fu_310_p2 <= "1" when (zext_ln31_fu_306_p1 = horizon_reg_177) else "0";
    icmp_ln34_1_fu_336_p2 <= "1" when (ap_phi_mux_e_1_phi_fu_216_p4 = tmp_end_reg_406) else "0";
    icmp_ln34_fu_330_p2 <= "1" when (unsigned(tmp_begin_fu_316_p1) < unsigned(tmp_end_fu_320_p4)) else "0";
    icmp_ln38_fu_347_p2 <= "1" when (level_q0 = ap_const_lv8_7F) else "0";
    icmp_ln45_fu_296_p2 <= "1" when (cnt_reg_189 = ap_const_lv64_0) else "0";

    level_address0_assign_proc : process(ap_CS_fsm_state1, edges_q0, starting_node, ap_CS_fsm_state3, zext_ln30_fu_291_p1, ap_CS_fsm_pp0_stage0, level_addr_2_reg_424, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            level_address0 <= level_addr_2_reg_424;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            level_address0 <= edges_q0(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            level_address0 <= zext_ln30_fu_291_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            level_address0 <= starting_node(8 - 1 downto 0);
        else 
            level_address0 <= "XXXXXXXX";
        end if; 
    end process;


    level_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            level_ce0 <= ap_const_logic_1;
        else 
            level_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    level_counts_address0_assign_proc : process(ap_CS_fsm_state1, add_ln27_reg_360, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            level_counts_address0 <= add_ln27_reg_360(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            level_counts_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            level_counts_address0 <= "XXXX";
        end if; 
    end process;


    level_counts_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            level_counts_ce0 <= ap_const_logic_1;
        else 
            level_counts_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    level_counts_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, cnt_reg_189)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            level_counts_d0 <= cnt_reg_189;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            level_counts_d0 <= ap_const_lv64_1;
        else 
            level_counts_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    level_counts_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln30_fu_285_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln30_fu_285_p2 = ap_const_lv1_1)))) then 
            level_counts_we0 <= ap_const_logic_1;
        else 
            level_counts_we0 <= ap_const_logic_0;
        end if; 
    end process;


    level_d0_assign_proc : process(ap_CS_fsm_state1, empty_20_reg_366, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            level_d0 <= empty_20_reg_366;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            level_d0 <= ap_const_lv8_0;
        else 
            level_d0 <= "XXXXXXXX";
        end if; 
    end process;


    level_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln34_1_reg_415, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, icmp_ln38_fu_347_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((icmp_ln38_fu_347_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln34_1_reg_415 = ap_const_lv1_0)))) then 
            level_we0 <= ap_const_logic_1;
        else 
            level_we0 <= ap_const_logic_0;
        end if; 
    end process;

    n_1_fu_279_p2 <= std_logic_vector(unsigned(n_reg_202) + unsigned(ap_const_lv9_1));
    nodes_address0 <= zext_ln30_reg_379(8 - 1 downto 0);

    nodes_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            nodes_ce0 <= ap_const_logic_1;
        else 
            nodes_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln31_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(level_q0),32));

    tmp_begin_fu_316_p1 <= nodes_q0(64 - 1 downto 0);
    tmp_end_fu_320_p4 <= nodes_q0(127 downto 64);
    trunc_ln27_fu_269_p1 <= horizon_reg_177(8 - 1 downto 0);
    zext_ln30_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_202),64));
    zext_ln31_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln31_fu_302_p1),64));
end behav;
