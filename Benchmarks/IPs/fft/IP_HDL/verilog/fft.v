// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fft_fft,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.232000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=0,HLS_SYN_FF=3755,HLS_SYN_LUT=5439,HLS_VERSION=2020_2}" *)

module custom_IP (
        s_axi_clk,
        s_axi_rst_n,
        s_axi_BUS_A_AWVALID,
        s_axi_BUS_A_AWREADY,
        s_axi_BUS_A_AWADDR,
        s_axi_BUS_A_WVALID,
        s_axi_BUS_A_WREADY,
        s_axi_BUS_A_WDATA,
        s_axi_BUS_A_WSTRB,
        s_axi_BUS_A_ARVALID,
        s_axi_BUS_A_ARREADY,
        s_axi_BUS_A_ARADDR,
        s_axi_BUS_A_RVALID,
        s_axi_BUS_A_RREADY,
        s_axi_BUS_A_RDATA,
        s_axi_BUS_A_RRESP,
        s_axi_BUS_A_BVALID,
        s_axi_BUS_A_BREADY,
        s_axi_BUS_A_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 27'd1;
parameter    ap_ST_fsm_state2 = 27'd2;
parameter    ap_ST_fsm_state3 = 27'd4;
parameter    ap_ST_fsm_state4 = 27'd8;
parameter    ap_ST_fsm_state5 = 27'd16;
parameter    ap_ST_fsm_state6 = 27'd32;
parameter    ap_ST_fsm_state7 = 27'd64;
parameter    ap_ST_fsm_state8 = 27'd128;
parameter    ap_ST_fsm_state9 = 27'd256;
parameter    ap_ST_fsm_state10 = 27'd512;
parameter    ap_ST_fsm_state11 = 27'd1024;
parameter    ap_ST_fsm_state12 = 27'd2048;
parameter    ap_ST_fsm_state13 = 27'd4096;
parameter    ap_ST_fsm_state14 = 27'd8192;
parameter    ap_ST_fsm_state15 = 27'd16384;
parameter    ap_ST_fsm_state16 = 27'd32768;
parameter    ap_ST_fsm_state17 = 27'd65536;
parameter    ap_ST_fsm_state18 = 27'd131072;
parameter    ap_ST_fsm_state19 = 27'd262144;
parameter    ap_ST_fsm_state20 = 27'd524288;
parameter    ap_ST_fsm_state21 = 27'd1048576;
parameter    ap_ST_fsm_state22 = 27'd2097152;
parameter    ap_ST_fsm_state23 = 27'd4194304;
parameter    ap_ST_fsm_state24 = 27'd8388608;
parameter    ap_ST_fsm_state25 = 27'd16777216;
parameter    ap_ST_fsm_state26 = 27'd33554432;
parameter    ap_ST_fsm_state27 = 27'd67108864;
parameter    C_S_AXI_BUS_A_DATA_WIDTH = 32;
parameter    C_S_AXI_BUS_A_ADDR_WIDTH = 15;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_BUS_A_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   s_axi_clk;
input   s_axi_rst_n;
input   s_axi_BUS_A_AWVALID;
output   s_axi_BUS_A_AWREADY;
input  [31:0] s_axi_BUS_A_AWADDR;
input   s_axi_BUS_A_WVALID;
output   s_axi_BUS_A_WREADY;
input  [C_S_AXI_BUS_A_DATA_WIDTH - 1:0] s_axi_BUS_A_WDATA;
input  [C_S_AXI_BUS_A_WSTRB_WIDTH - 1:0] s_axi_BUS_A_WSTRB;
input   s_axi_BUS_A_ARVALID;
output   s_axi_BUS_A_ARREADY;
input  [31:0] s_axi_BUS_A_ARADDR;
output   s_axi_BUS_A_RVALID;
input   s_axi_BUS_A_RREADY;
output  [C_S_AXI_BUS_A_DATA_WIDTH - 1:0] s_axi_BUS_A_RDATA;
output  [1:0] s_axi_BUS_A_RRESP;
output   s_axi_BUS_A_BVALID;
input   s_axi_BUS_A_BREADY;
output  [1:0] s_axi_BUS_A_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [9:0] real_r_address0;
reg    real_r_ce0;
reg    real_r_we0;
reg   [63:0] real_r_d0;
wire   [63:0] real_r_q0;
reg   [9:0] img_address0;
reg    img_ce0;
reg    img_we0;
reg   [63:0] img_d0;
wire   [63:0] img_q0;
wire   [8:0] real_twid_address0;
reg    real_twid_ce0;
wire   [63:0] real_twid_q0;
wire   [8:0] img_twid_address0;
reg    img_twid_ce0;
wire   [63:0] img_twid_q0;
reg   [63:0] reg_208;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state14;
reg   [0:0] icmp_ln17_reg_426;
reg   [0:0] icmp_ln30_reg_446;
reg   [63:0] reg_212;
wire   [63:0] grp_fu_184_p2;
reg   [63:0] reg_216;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state25;
wire   [63:0] grp_fu_188_p2;
reg   [63:0] reg_220;
wire   [3:0] log_1_fu_224_p2;
reg   [3:0] log_1_reg_401;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln16_fu_230_p2;
wire  signed [31:0] sext_ln12_fu_236_p1;
reg  signed [31:0] sext_ln12_reg_410;
wire   [9:0] zext_ln12_fu_240_p1;
reg   [9:0] zext_ln12_reg_416;
wire   [9:0] xor_ln19_fu_248_p2;
reg   [9:0] xor_ln19_reg_421;
wire   [0:0] icmp_ln17_fu_264_p2;
wire    ap_CS_fsm_state3;
wire   [31:0] odd_2_fu_274_p2;
reg   [31:0] odd_2_reg_430;
reg   [9:0] real_addr_reg_436;
reg   [9:0] img_addr_reg_441;
wire   [0:0] icmp_ln30_fu_295_p2;
reg   [9:0] real_addr_1_reg_460;
reg   [9:0] img_addr_1_reg_465;
reg   [63:0] real_twid_load_reg_470;
reg   [63:0] img_twid_load_reg_475;
reg   [63:0] real_load_1_reg_480;
wire    ap_CS_fsm_state5;
reg   [63:0] img_load_1_reg_485;
wire   [63:0] bitcast_ln21_fu_312_p1;
reg   [63:0] bitcast_ln21_reg_490;
wire    ap_CS_fsm_state6;
wire   [63:0] bitcast_ln21_1_fu_317_p1;
reg   [63:0] bitcast_ln21_1_reg_495;
wire   [63:0] bitcast_ln25_fu_321_p1;
reg   [63:0] bitcast_ln25_reg_500;
wire   [63:0] bitcast_ln25_1_fu_326_p1;
reg   [63:0] bitcast_ln25_1_reg_505;
wire   [63:0] bitcast_ln31_fu_350_p1;
wire    ap_CS_fsm_state15;
wire   [63:0] bitcast_ln31_1_fu_355_p1;
wire   [63:0] bitcast_ln32_fu_361_p1;
wire   [63:0] bitcast_ln32_1_fu_366_p1;
wire   [63:0] grp_fu_192_p2;
reg   [63:0] mul_reg_534;
wire    ap_CS_fsm_state20;
wire   [63:0] grp_fu_196_p2;
reg   [63:0] mul1_reg_539;
wire   [63:0] grp_fu_200_p2;
reg   [63:0] mul2_reg_544;
wire   [63:0] grp_fu_204_p2;
reg   [63:0] mul3_reg_549;
wire   [31:0] odd_3_fu_382_p2;
wire    ap_CS_fsm_state26;
wire  signed [29:0] span_fu_397_p1;
wire    ap_CS_fsm_state27;
reg  signed [29:0] span_1_reg_152;
reg   [3:0] log_reg_164;
reg   [31:0] odd_1_reg_175;
wire   [63:0] zext_ln21_fu_284_p1;
wire   [63:0] zext_ln31_fu_301_p1;
wire   [63:0] zext_ln21_1_fu_307_p1;
wire   [63:0] bitcast_ln22_fu_330_p1;
wire    ap_CS_fsm_state12;
wire   [63:0] bitcast_ln23_fu_340_p1;
wire    ap_CS_fsm_state13;
wire   [63:0] bitcast_ln35_fu_377_p1;
wire   [63:0] bitcast_ln26_fu_335_p1;
wire   [63:0] bitcast_ln27_fu_345_p1;
wire   [63:0] bitcast_ln33_fu_372_p1;
reg   [63:0] grp_fu_184_p0;
reg   [63:0] grp_fu_184_p1;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state21;
reg   [63:0] grp_fu_188_p0;
reg   [63:0] grp_fu_188_p1;
wire   [9:0] trunc_ln12_fu_244_p1;
wire   [21:0] tmp_fu_254_p4;
wire   [9:0] trunc_ln18_fu_270_p1;
wire   [9:0] even_fu_279_p2;
wire   [9:0] rootindex_fu_290_p2;
wire   [28:0] tmp_1_fu_387_p4;
reg   [1:0] grp_fu_184_opcode;
reg   [1:0] grp_fu_188_opcode;
reg   [26:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'd1;
end

fft_BUS_A_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_BUS_A_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_BUS_A_DATA_WIDTH ))
BUS_A_s_axi_U(
    .AWVALID(s_axi_BUS_A_AWVALID),
    .AWREADY(s_axi_BUS_A_AWREADY),
    .AWADDR(s_axi_BUS_A_AWADDR),
    .WVALID(s_axi_BUS_A_WVALID),
    .WREADY(s_axi_BUS_A_WREADY),
    .WDATA(s_axi_BUS_A_WDATA),
    .WSTRB(s_axi_BUS_A_WSTRB),
    .ARVALID(s_axi_BUS_A_ARVALID),
    .ARREADY(s_axi_BUS_A_ARREADY),
    .ARADDR(s_axi_BUS_A_ARADDR),
    .RVALID(s_axi_BUS_A_RVALID),
    .RREADY(s_axi_BUS_A_RREADY),
    .RDATA(s_axi_BUS_A_RDATA),
    .RRESP(s_axi_BUS_A_RRESP),
    .BVALID(s_axi_BUS_A_BVALID),
    .BREADY(s_axi_BUS_A_BREADY),
    .BRESP(s_axi_BUS_A_BRESP),
    .ACLK(s_axi_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .real_twid_address0(real_twid_address0),
    .real_twid_ce0(real_twid_ce0),
    .real_twid_q0(real_twid_q0),
    .real_r_address0(real_r_address0),
    .real_r_ce0(real_r_ce0),
    .real_r_we0(real_r_we0),
    .real_r_d0(real_r_d0),
    .real_r_q0(real_r_q0),
    .img_address0(img_address0),
    .img_ce0(img_ce0),
    .img_we0(img_we0),
    .img_d0(img_d0),
    .img_q0(img_q0),
    .img_twid_address0(img_twid_address0),
    .img_twid_ce0(img_twid_ce0),
    .img_twid_q0(img_twid_q0),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

fft_dadddsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadddsub_64ns_64ns_64_5_full_dsp_1_U1(
    .clk(s_axi_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_184_p0),
    .din1(grp_fu_184_p1),
    .opcode(grp_fu_184_opcode),
    .ce(1'b1),
    .dout(grp_fu_184_p2)
);

fft_dadddsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadddsub_64ns_64ns_64_5_full_dsp_1_U2(
    .clk(s_axi_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_188_p0),
    .din1(grp_fu_188_p1),
    .opcode(grp_fu_188_opcode),
    .ce(1'b1),
    .dout(grp_fu_188_p2)
);

fft_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U3(
    .clk(s_axi_clk),
    .reset(ap_rst_n_inv),
    .din0(bitcast_ln31_fu_350_p1),
    .din1(bitcast_ln31_1_fu_355_p1),
    .ce(1'b1),
    .dout(grp_fu_192_p2)
);

fft_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U4(
    .clk(s_axi_clk),
    .reset(ap_rst_n_inv),
    .din0(bitcast_ln32_fu_361_p1),
    .din1(bitcast_ln32_1_fu_366_p1),
    .ce(1'b1),
    .dout(grp_fu_196_p2)
);

fft_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U5(
    .clk(s_axi_clk),
    .reset(ap_rst_n_inv),
    .din0(bitcast_ln31_fu_350_p1),
    .din1(bitcast_ln32_1_fu_366_p1),
    .ce(1'b1),
    .dout(grp_fu_200_p2)
);

fft_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U6(
    .clk(s_axi_clk),
    .reset(ap_rst_n_inv),
    .din0(bitcast_ln32_fu_361_p1),
    .din1(bitcast_ln31_1_fu_355_p1),
    .ce(1'b1),
    .dout(grp_fu_204_p2)
);

always @ (posedge s_axi_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge s_axi_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        log_reg_164 <= log_1_reg_401;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        log_reg_164 <= 4'd0;
    end
end

always @ (posedge s_axi_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (icmp_ln17_reg_426 == 1'd1))) begin
        odd_1_reg_175 <= odd_3_fu_382_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln16_fu_230_p2 == 1'd0))) begin
        odd_1_reg_175 <= sext_ln12_fu_236_p1;
    end
end

always @ (posedge s_axi_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        span_1_reg_152 <= span_fu_397_p1;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        span_1_reg_152 <= 30'd512;
    end
end

always @ (posedge s_axi_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        bitcast_ln21_1_reg_495 <= bitcast_ln21_1_fu_317_p1;
        bitcast_ln21_reg_490 <= bitcast_ln21_fu_312_p1;
        bitcast_ln25_1_reg_505 <= bitcast_ln25_1_fu_326_p1;
        bitcast_ln25_reg_500 <= bitcast_ln25_fu_321_p1;
    end
end

always @ (posedge s_axi_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln17_reg_426 <= icmp_ln17_fu_264_p2;
    end
end

always @ (posedge s_axi_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln17_fu_264_p2 == 1'd1))) begin
        icmp_ln30_reg_446 <= icmp_ln30_fu_295_p2;
        img_addr_reg_441 <= zext_ln21_fu_284_p1;
        odd_2_reg_430 <= odd_2_fu_274_p2;
        real_addr_reg_436 <= zext_ln21_fu_284_p1;
    end
end

always @ (posedge s_axi_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        img_addr_1_reg_465 <= zext_ln21_1_fu_307_p1;
        real_addr_1_reg_460 <= zext_ln21_1_fu_307_p1;
    end
end

always @ (posedge s_axi_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        img_load_1_reg_485 <= img_q0;
        real_load_1_reg_480 <= real_r_q0;
    end
end

always @ (posedge s_axi_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln30_reg_446 == 1'd0))) begin
        img_twid_load_reg_475 <= img_twid_q0;
        real_twid_load_reg_470 <= real_twid_q0;
    end
end

always @ (posedge s_axi_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        log_1_reg_401 <= log_1_fu_224_p2;
    end
end

always @ (posedge s_axi_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln30_reg_446 == 1'd0) & (icmp_ln17_reg_426 == 1'd1))) begin
        mul1_reg_539 <= grp_fu_196_p2;
        mul2_reg_544 <= grp_fu_200_p2;
        mul3_reg_549 <= grp_fu_204_p2;
        mul_reg_534 <= grp_fu_192_p2;
    end
end

always @ (posedge s_axi_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state14) & (icmp_ln30_reg_446 == 1'd0) & (icmp_ln17_reg_426 == 1'd1)))) begin
        reg_208 <= real_r_q0;
        reg_212 <= img_q0;
    end
end

always @ (posedge s_axi_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state25) & (icmp_ln30_reg_446 == 1'd0) & (icmp_ln17_reg_426 == 1'd1)))) begin
        reg_216 <= grp_fu_184_p2;
        reg_220 <= grp_fu_188_p2;
    end
end

always @ (posedge s_axi_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln16_fu_230_p2 == 1'd0))) begin
        sext_ln12_reg_410 <= sext_ln12_fu_236_p1;
        xor_ln19_reg_421 <= xor_ln19_fu_248_p2;
        zext_ln12_reg_416[3 : 0] <= zext_ln12_fu_240_p1[3 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln16_fu_230_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln16_fu_230_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state21) & (icmp_ln30_reg_446 == 1'd0) & (icmp_ln17_reg_426 == 1'd1)))) begin
        grp_fu_184_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_184_opcode = 2'd0;
    end else begin
        grp_fu_184_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_184_p0 = mul_reg_534;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_184_p0 = bitcast_ln21_reg_490;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_184_p0 = bitcast_ln21_fu_312_p1;
    end else begin
        grp_fu_184_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_184_p1 = mul1_reg_539;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_184_p1 = bitcast_ln21_1_reg_495;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_184_p1 = bitcast_ln21_1_fu_317_p1;
    end else begin
        grp_fu_184_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_188_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state21) & (icmp_ln30_reg_446 == 1'd0) & (icmp_ln17_reg_426 == 1'd1)))) begin
        grp_fu_188_opcode = 2'd0;
    end else begin
        grp_fu_188_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_188_p0 = mul2_reg_544;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_188_p0 = bitcast_ln25_reg_500;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_188_p0 = bitcast_ln25_fu_321_p1;
    end else begin
        grp_fu_188_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_188_p1 = mul3_reg_549;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_188_p1 = bitcast_ln25_1_reg_505;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_188_p1 = bitcast_ln25_1_fu_326_p1;
    end else begin
        grp_fu_188_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        img_address0 = img_addr_reg_441;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state11))) begin
        img_address0 = img_addr_1_reg_465;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        img_address0 = zext_ln21_1_fu_307_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        img_address0 = zext_ln21_fu_284_p1;
    end else begin
        img_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state4))) begin
        img_ce0 = 1'b1;
    end else begin
        img_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        img_d0 = bitcast_ln33_fu_372_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        img_d0 = bitcast_ln27_fu_345_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        img_d0 = bitcast_ln26_fu_335_p1;
    end else begin
        img_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        img_twid_ce0 = 1'b1;
    end else begin
        img_twid_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state26) & (icmp_ln30_reg_446 == 1'd0) & (icmp_ln17_reg_426 == 1'd1)))) begin
        img_we0 = 1'b1;
    end else begin
        img_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        real_r_address0 = real_addr_reg_436;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state11))) begin
        real_r_address0 = real_addr_1_reg_460;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        real_r_address0 = zext_ln21_1_fu_307_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        real_r_address0 = zext_ln21_fu_284_p1;
    end else begin
        real_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state4))) begin
        real_r_ce0 = 1'b1;
    end else begin
        real_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        real_r_d0 = bitcast_ln35_fu_377_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        real_r_d0 = bitcast_ln23_fu_340_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        real_r_d0 = bitcast_ln22_fu_330_p1;
    end else begin
        real_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state26) & (icmp_ln30_reg_446 == 1'd0) & (icmp_ln17_reg_426 == 1'd1)))) begin
        real_r_we0 = 1'b1;
    end else begin
        real_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        real_twid_ce0 = 1'b1;
    end else begin
        real_twid_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln16_fu_230_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln17_fu_264_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_rst_n_inv = ~s_axi_rst_n;
end

assign bitcast_ln21_1_fu_317_p1 = real_load_1_reg_480;

assign bitcast_ln21_fu_312_p1 = reg_208;

assign bitcast_ln22_fu_330_p1 = reg_216;

assign bitcast_ln23_fu_340_p1 = reg_216;

assign bitcast_ln25_1_fu_326_p1 = img_load_1_reg_485;

assign bitcast_ln25_fu_321_p1 = reg_212;

assign bitcast_ln26_fu_335_p1 = reg_220;

assign bitcast_ln27_fu_345_p1 = reg_220;

assign bitcast_ln31_1_fu_355_p1 = reg_208;

assign bitcast_ln31_fu_350_p1 = real_twid_load_reg_470;

assign bitcast_ln32_1_fu_366_p1 = reg_212;

assign bitcast_ln32_fu_361_p1 = img_twid_load_reg_475;

assign bitcast_ln33_fu_372_p1 = reg_220;

assign bitcast_ln35_fu_377_p1 = reg_216;

assign even_fu_279_p2 = (xor_ln19_reg_421 & trunc_ln18_fu_270_p1);

assign icmp_ln16_fu_230_p2 = ((log_reg_164 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_264_p2 = (($signed(tmp_fu_254_p4) < $signed(22'd1)) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_295_p2 = ((rootindex_fu_290_p2 == 10'd0) ? 1'b1 : 1'b0);

assign img_twid_address0 = zext_ln31_fu_301_p1;

assign log_1_fu_224_p2 = (log_reg_164 + 4'd1);

assign odd_2_fu_274_p2 = (sext_ln12_reg_410 | odd_1_reg_175);

assign odd_3_fu_382_p2 = (odd_2_reg_430 + 32'd1);

assign real_twid_address0 = zext_ln31_fu_301_p1;

assign rootindex_fu_290_p2 = even_fu_279_p2 << zext_ln12_reg_416;

assign sext_ln12_fu_236_p1 = span_1_reg_152;

assign span_fu_397_p1 = $signed(tmp_1_fu_387_p4);

assign tmp_1_fu_387_p4 = {{span_1_reg_152[29:1]}};

assign tmp_fu_254_p4 = {{odd_1_reg_175[31:10]}};

assign trunc_ln12_fu_244_p1 = span_1_reg_152[9:0];

assign trunc_ln18_fu_270_p1 = odd_1_reg_175[9:0];

assign xor_ln19_fu_248_p2 = (trunc_ln12_fu_244_p1 ^ 10'd1023);

assign zext_ln12_fu_240_p1 = log_reg_164;

assign zext_ln21_1_fu_307_p1 = odd_2_reg_430;

assign zext_ln21_fu_284_p1 = even_fu_279_p2;

assign zext_ln31_fu_301_p1 = rootindex_fu_290_p2;

always @ (posedge s_axi_clk) begin
    zext_ln12_reg_416[9:4] <= 6'b000000;
end

endmodule //fft
