-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft is
generic (
    C_S_AXI_BUS_A_ADDR_WIDTH : INTEGER := 15;
    C_S_AXI_BUS_A_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_BUS_A_AWVALID : IN STD_LOGIC;
    s_axi_BUS_A_AWREADY : OUT STD_LOGIC;
    s_axi_BUS_A_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_A_ADDR_WIDTH-1 downto 0);
    s_axi_BUS_A_WVALID : IN STD_LOGIC;
    s_axi_BUS_A_WREADY : OUT STD_LOGIC;
    s_axi_BUS_A_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_A_DATA_WIDTH-1 downto 0);
    s_axi_BUS_A_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_A_DATA_WIDTH/8-1 downto 0);
    s_axi_BUS_A_ARVALID : IN STD_LOGIC;
    s_axi_BUS_A_ARREADY : OUT STD_LOGIC;
    s_axi_BUS_A_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_A_ADDR_WIDTH-1 downto 0);
    s_axi_BUS_A_RVALID : OUT STD_LOGIC;
    s_axi_BUS_A_RREADY : IN STD_LOGIC;
    s_axi_BUS_A_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_BUS_A_DATA_WIDTH-1 downto 0);
    s_axi_BUS_A_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_BUS_A_BVALID : OUT STD_LOGIC;
    s_axi_BUS_A_BREADY : IN STD_LOGIC;
    s_axi_BUS_A_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of fft is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fft_fft,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.232000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=0,HLS_SYN_FF=3755,HLS_SYN_LUT=5439,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv30_200 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000001000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal real_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal real_r_ce0 : STD_LOGIC;
    signal real_r_we0 : STD_LOGIC;
    signal real_r_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal real_r_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal img_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal img_ce0 : STD_LOGIC;
    signal img_we0 : STD_LOGIC;
    signal img_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal img_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal real_twid_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal real_twid_ce0 : STD_LOGIC;
    signal real_twid_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal img_twid_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal img_twid_ce0 : STD_LOGIC;
    signal img_twid_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_208 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln17_reg_426 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_446 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_212 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_184_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_216 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_188_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_220 : STD_LOGIC_VECTOR (63 downto 0);
    signal log_1_fu_224_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal log_1_reg_401 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln16_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln12_fu_236_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln12_reg_410 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln12_fu_240_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln12_reg_416 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln19_fu_248_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln19_reg_421 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln17_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal odd_2_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal odd_2_reg_430 : STD_LOGIC_VECTOR (31 downto 0);
    signal real_addr_reg_436 : STD_LOGIC_VECTOR (9 downto 0);
    signal img_addr_reg_441 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln30_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal real_addr_1_reg_460 : STD_LOGIC_VECTOR (9 downto 0);
    signal img_addr_1_reg_465 : STD_LOGIC_VECTOR (9 downto 0);
    signal real_twid_load_reg_470 : STD_LOGIC_VECTOR (63 downto 0);
    signal img_twid_load_reg_475 : STD_LOGIC_VECTOR (63 downto 0);
    signal real_load_1_reg_480 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal img_load_1_reg_485 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln21_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln21_reg_490 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal bitcast_ln21_1_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln21_1_reg_495 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln25_fu_321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln25_reg_500 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln25_1_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln25_1_reg_505 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln31_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal bitcast_ln31_1_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln32_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln32_1_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_192_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_reg_534 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_196_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul1_reg_539 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_200_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul2_reg_544 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_204_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul3_reg_549 : STD_LOGIC_VECTOR (63 downto 0);
    signal odd_3_fu_382_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal span_fu_397_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal span_1_reg_152 : STD_LOGIC_VECTOR (29 downto 0);
    signal log_reg_164 : STD_LOGIC_VECTOR (3 downto 0);
    signal odd_1_reg_175 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln21_fu_284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_1_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln22_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal bitcast_ln23_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal bitcast_ln35_fu_377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln26_fu_335_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln27_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln33_fu_372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_184_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_184_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_188_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_188_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln12_fu_244_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_254_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln18_fu_270_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal even_fu_279_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal rootindex_fu_290_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_387_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_184_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_188_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fft_dadddsub_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fft_dmul_64ns_64ns_64_6_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fft_BUS_A_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        real_twid_address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        real_twid_ce0 : IN STD_LOGIC;
        real_twid_q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        real_r_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        real_r_ce0 : IN STD_LOGIC;
        real_r_we0 : IN STD_LOGIC;
        real_r_d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        real_r_q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        img_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        img_ce0 : IN STD_LOGIC;
        img_we0 : IN STD_LOGIC;
        img_d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        img_q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        img_twid_address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        img_twid_ce0 : IN STD_LOGIC;
        img_twid_q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    BUS_A_s_axi_U : component fft_BUS_A_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_BUS_A_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_BUS_A_DATA_WIDTH)
    port map (
        AWVALID => s_axi_BUS_A_AWVALID,
        AWREADY => s_axi_BUS_A_AWREADY,
        AWADDR => s_axi_BUS_A_AWADDR,
        WVALID => s_axi_BUS_A_WVALID,
        WREADY => s_axi_BUS_A_WREADY,
        WDATA => s_axi_BUS_A_WDATA,
        WSTRB => s_axi_BUS_A_WSTRB,
        ARVALID => s_axi_BUS_A_ARVALID,
        ARREADY => s_axi_BUS_A_ARREADY,
        ARADDR => s_axi_BUS_A_ARADDR,
        RVALID => s_axi_BUS_A_RVALID,
        RREADY => s_axi_BUS_A_RREADY,
        RDATA => s_axi_BUS_A_RDATA,
        RRESP => s_axi_BUS_A_RRESP,
        BVALID => s_axi_BUS_A_BVALID,
        BREADY => s_axi_BUS_A_BREADY,
        BRESP => s_axi_BUS_A_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        real_twid_address0 => real_twid_address0,
        real_twid_ce0 => real_twid_ce0,
        real_twid_q0 => real_twid_q0,
        real_r_address0 => real_r_address0,
        real_r_ce0 => real_r_ce0,
        real_r_we0 => real_r_we0,
        real_r_d0 => real_r_d0,
        real_r_q0 => real_r_q0,
        img_address0 => img_address0,
        img_ce0 => img_ce0,
        img_we0 => img_we0,
        img_d0 => img_d0,
        img_q0 => img_q0,
        img_twid_address0 => img_twid_address0,
        img_twid_ce0 => img_twid_ce0,
        img_twid_q0 => img_twid_q0,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    dadddsub_64ns_64ns_64_5_full_dsp_1_U1 : component fft_dadddsub_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_184_p0,
        din1 => grp_fu_184_p1,
        opcode => grp_fu_184_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_184_p2);

    dadddsub_64ns_64ns_64_5_full_dsp_1_U2 : component fft_dadddsub_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_188_p0,
        din1 => grp_fu_188_p1,
        opcode => grp_fu_188_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_188_p2);

    dmul_64ns_64ns_64_6_max_dsp_1_U3 : component fft_dmul_64ns_64ns_64_6_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => bitcast_ln31_fu_350_p1,
        din1 => bitcast_ln31_1_fu_355_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_192_p2);

    dmul_64ns_64ns_64_6_max_dsp_1_U4 : component fft_dmul_64ns_64ns_64_6_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => bitcast_ln32_fu_361_p1,
        din1 => bitcast_ln32_1_fu_366_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_196_p2);

    dmul_64ns_64ns_64_6_max_dsp_1_U5 : component fft_dmul_64ns_64ns_64_6_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => bitcast_ln31_fu_350_p1,
        din1 => bitcast_ln32_1_fu_366_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_200_p2);

    dmul_64ns_64ns_64_6_max_dsp_1_U6 : component fft_dmul_64ns_64ns_64_6_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => bitcast_ln32_fu_361_p1,
        din1 => bitcast_ln31_1_fu_355_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_204_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    log_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                log_reg_164 <= log_1_reg_401;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                log_reg_164 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    odd_1_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln17_reg_426 = ap_const_lv1_1))) then 
                odd_1_reg_175 <= odd_3_fu_382_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln16_fu_230_p2 = ap_const_lv1_0))) then 
                odd_1_reg_175 <= sext_ln12_fu_236_p1;
            end if; 
        end if;
    end process;

    span_1_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                span_1_reg_152 <= span_fu_397_p1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                span_1_reg_152 <= ap_const_lv30_200;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                bitcast_ln21_1_reg_495 <= bitcast_ln21_1_fu_317_p1;
                bitcast_ln21_reg_490 <= bitcast_ln21_fu_312_p1;
                bitcast_ln25_1_reg_505 <= bitcast_ln25_1_fu_326_p1;
                bitcast_ln25_reg_500 <= bitcast_ln25_fu_321_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln17_reg_426 <= icmp_ln17_fu_264_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln17_fu_264_p2 = ap_const_lv1_1))) then
                icmp_ln30_reg_446 <= icmp_ln30_fu_295_p2;
                img_addr_reg_441 <= zext_ln21_fu_284_p1(10 - 1 downto 0);
                odd_2_reg_430 <= odd_2_fu_274_p2;
                real_addr_reg_436 <= zext_ln21_fu_284_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                img_addr_1_reg_465 <= zext_ln21_1_fu_307_p1(10 - 1 downto 0);
                real_addr_1_reg_460 <= zext_ln21_1_fu_307_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                img_load_1_reg_485 <= img_q0;
                real_load_1_reg_480 <= real_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln30_reg_446 = ap_const_lv1_0))) then
                img_twid_load_reg_475 <= img_twid_q0;
                real_twid_load_reg_470 <= real_twid_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                log_1_reg_401 <= log_1_fu_224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln30_reg_446 = ap_const_lv1_0) and (icmp_ln17_reg_426 = ap_const_lv1_1))) then
                mul1_reg_539 <= grp_fu_196_p2;
                mul2_reg_544 <= grp_fu_200_p2;
                mul3_reg_549 <= grp_fu_204_p2;
                mul_reg_534 <= grp_fu_192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln30_reg_446 = ap_const_lv1_0) and (icmp_ln17_reg_426 = ap_const_lv1_1)))) then
                reg_208 <= real_r_q0;
                reg_212 <= img_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln30_reg_446 = ap_const_lv1_0) and (icmp_ln17_reg_426 = ap_const_lv1_1)))) then
                reg_216 <= grp_fu_184_p2;
                reg_220 <= grp_fu_188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln16_fu_230_p2 = ap_const_lv1_0))) then
                sext_ln12_reg_410 <= sext_ln12_fu_236_p1;
                xor_ln19_reg_421 <= xor_ln19_fu_248_p2;
                    zext_ln12_reg_416(3 downto 0) <= zext_ln12_fu_240_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln12_reg_416(9 downto 4) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln16_fu_230_p2, icmp_ln17_fu_264_p2, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln16_fu_230_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln17_fu_264_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln16_fu_230_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln16_fu_230_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln16_fu_230_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln16_fu_230_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln21_1_fu_317_p1 <= real_load_1_reg_480;
    bitcast_ln21_fu_312_p1 <= reg_208;
    bitcast_ln22_fu_330_p1 <= reg_216;
    bitcast_ln23_fu_340_p1 <= reg_216;
    bitcast_ln25_1_fu_326_p1 <= img_load_1_reg_485;
    bitcast_ln25_fu_321_p1 <= reg_212;
    bitcast_ln26_fu_335_p1 <= reg_220;
    bitcast_ln27_fu_345_p1 <= reg_220;
    bitcast_ln31_1_fu_355_p1 <= reg_208;
    bitcast_ln31_fu_350_p1 <= real_twid_load_reg_470;
    bitcast_ln32_1_fu_366_p1 <= reg_212;
    bitcast_ln32_fu_361_p1 <= img_twid_load_reg_475;
    bitcast_ln33_fu_372_p1 <= reg_220;
    bitcast_ln35_fu_377_p1 <= reg_216;
    even_fu_279_p2 <= (xor_ln19_reg_421 and trunc_ln18_fu_270_p1);

    grp_fu_184_opcode_assign_proc : process(icmp_ln17_reg_426, icmp_ln30_reg_446, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln30_reg_446 = ap_const_lv1_0) and (icmp_ln17_reg_426 = ap_const_lv1_1)))) then 
            grp_fu_184_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_184_opcode <= ap_const_lv2_0;
        else 
            grp_fu_184_opcode <= "XX";
        end if; 
    end process;


    grp_fu_184_p0_assign_proc : process(bitcast_ln21_fu_312_p1, bitcast_ln21_reg_490, ap_CS_fsm_state6, mul_reg_534, ap_CS_fsm_state7, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_184_p0 <= mul_reg_534;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_184_p0 <= bitcast_ln21_reg_490;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_184_p0 <= bitcast_ln21_fu_312_p1;
        else 
            grp_fu_184_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_184_p1_assign_proc : process(ap_CS_fsm_state6, bitcast_ln21_1_fu_317_p1, bitcast_ln21_1_reg_495, mul1_reg_539, ap_CS_fsm_state7, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_184_p1 <= mul1_reg_539;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_184_p1 <= bitcast_ln21_1_reg_495;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_184_p1 <= bitcast_ln21_1_fu_317_p1;
        else 
            grp_fu_184_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_188_opcode_assign_proc : process(icmp_ln17_reg_426, icmp_ln30_reg_446, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_188_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln30_reg_446 = ap_const_lv1_0) and (icmp_ln17_reg_426 = ap_const_lv1_1)))) then 
            grp_fu_188_opcode <= ap_const_lv2_0;
        else 
            grp_fu_188_opcode <= "XX";
        end if; 
    end process;


    grp_fu_188_p0_assign_proc : process(ap_CS_fsm_state6, bitcast_ln25_fu_321_p1, bitcast_ln25_reg_500, mul2_reg_544, ap_CS_fsm_state7, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_188_p0 <= mul2_reg_544;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_188_p0 <= bitcast_ln25_reg_500;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_188_p0 <= bitcast_ln25_fu_321_p1;
        else 
            grp_fu_188_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_188_p1_assign_proc : process(ap_CS_fsm_state6, bitcast_ln25_1_fu_326_p1, bitcast_ln25_1_reg_505, mul3_reg_549, ap_CS_fsm_state7, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_188_p1 <= mul3_reg_549;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_188_p1 <= bitcast_ln25_1_reg_505;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_188_p1 <= bitcast_ln25_1_fu_326_p1;
        else 
            grp_fu_188_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln16_fu_230_p2 <= "1" when (log_reg_164 = ap_const_lv4_A) else "0";
    icmp_ln17_fu_264_p2 <= "1" when (signed(tmp_fu_254_p4) < signed(ap_const_lv22_1)) else "0";
    icmp_ln30_fu_295_p2 <= "1" when (rootindex_fu_290_p2 = ap_const_lv10_0) else "0";

    img_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state3, img_addr_reg_441, img_addr_1_reg_465, ap_CS_fsm_state26, zext_ln21_fu_284_p1, zext_ln21_1_fu_307_p1, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            img_address0 <= img_addr_reg_441;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            img_address0 <= img_addr_1_reg_465;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            img_address0 <= zext_ln21_1_fu_307_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            img_address0 <= zext_ln21_fu_284_p1(10 - 1 downto 0);
        else 
            img_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    img_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state3, ap_CS_fsm_state26, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            img_ce0 <= ap_const_logic_1;
        else 
            img_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    img_d0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state26, ap_CS_fsm_state12, bitcast_ln26_fu_335_p1, bitcast_ln27_fu_345_p1, bitcast_ln33_fu_372_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            img_d0 <= bitcast_ln33_fu_372_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            img_d0 <= bitcast_ln27_fu_345_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            img_d0 <= bitcast_ln26_fu_335_p1;
        else 
            img_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    img_twid_address0 <= zext_ln31_fu_301_p1(9 - 1 downto 0);

    img_twid_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            img_twid_ce0 <= ap_const_logic_1;
        else 
            img_twid_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    img_we0_assign_proc : process(icmp_ln17_reg_426, icmp_ln30_reg_446, ap_CS_fsm_state11, ap_CS_fsm_state26, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln30_reg_446 = ap_const_lv1_0) and (icmp_ln17_reg_426 = ap_const_lv1_1)))) then 
            img_we0 <= ap_const_logic_1;
        else 
            img_we0 <= ap_const_logic_0;
        end if; 
    end process;

    log_1_fu_224_p2 <= std_logic_vector(unsigned(log_reg_164) + unsigned(ap_const_lv4_1));
    odd_2_fu_274_p2 <= (sext_ln12_reg_410 or odd_1_reg_175);
    odd_3_fu_382_p2 <= std_logic_vector(unsigned(odd_2_reg_430) + unsigned(ap_const_lv32_1));

    real_r_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state3, real_addr_reg_436, real_addr_1_reg_460, ap_CS_fsm_state26, zext_ln21_fu_284_p1, zext_ln21_1_fu_307_p1, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            real_r_address0 <= real_addr_reg_436;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            real_r_address0 <= real_addr_1_reg_460;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            real_r_address0 <= zext_ln21_1_fu_307_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            real_r_address0 <= zext_ln21_fu_284_p1(10 - 1 downto 0);
        else 
            real_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    real_r_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state3, ap_CS_fsm_state26, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            real_r_ce0 <= ap_const_logic_1;
        else 
            real_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    real_r_d0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state26, bitcast_ln22_fu_330_p1, ap_CS_fsm_state12, bitcast_ln23_fu_340_p1, bitcast_ln35_fu_377_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            real_r_d0 <= bitcast_ln35_fu_377_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            real_r_d0 <= bitcast_ln23_fu_340_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            real_r_d0 <= bitcast_ln22_fu_330_p1;
        else 
            real_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    real_r_we0_assign_proc : process(icmp_ln17_reg_426, icmp_ln30_reg_446, ap_CS_fsm_state11, ap_CS_fsm_state26, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln30_reg_446 = ap_const_lv1_0) and (icmp_ln17_reg_426 = ap_const_lv1_1)))) then 
            real_r_we0 <= ap_const_logic_1;
        else 
            real_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    real_twid_address0 <= zext_ln31_fu_301_p1(9 - 1 downto 0);

    real_twid_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            real_twid_ce0 <= ap_const_logic_1;
        else 
            real_twid_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rootindex_fu_290_p2 <= std_logic_vector(shift_left(unsigned(even_fu_279_p2),to_integer(unsigned('0' & zext_ln12_reg_416(10-1 downto 0)))));
        sext_ln12_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(span_1_reg_152),32));

        span_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_387_p4),30));

    tmp_1_fu_387_p4 <= span_1_reg_152(29 downto 1);
    tmp_fu_254_p4 <= odd_1_reg_175(31 downto 10);
    trunc_ln12_fu_244_p1 <= span_1_reg_152(10 - 1 downto 0);
    trunc_ln18_fu_270_p1 <= odd_1_reg_175(10 - 1 downto 0);
    xor_ln19_fu_248_p2 <= (trunc_ln12_fu_244_p1 xor ap_const_lv10_3FF);
    zext_ln12_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(log_reg_164),10));
    zext_ln21_1_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(odd_2_reg_430),64));
    zext_ln21_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(even_fu_279_p2),64));
    zext_ln31_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rootindex_fu_290_p2),64));
end behav;
