// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ms_mergesort_merge_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_we0,
        a_d0,
        a_q0,
        start_r,
        m,
        stop
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_state4 = 7'd4;
parameter    ap_ST_fsm_pp1_stage0 = 7'd8;
parameter    ap_ST_fsm_state7 = 7'd16;
parameter    ap_ST_fsm_pp2_stage0 = 7'd32;
parameter    ap_ST_fsm_state10 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] a_address0;
output   a_ce0;
output   a_we0;
output  [31:0] a_d0;
input  [31:0] a_q0;
input  [31:0] start_r;
input  [31:0] m;
input  [31:0] stop;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] a_address0;
reg a_ce0;
reg a_we0;
reg[31:0] a_d0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [31:0] i_reg_147;
reg   [63:0] j_1_reg_157;
reg   [63:0] k_reg_166;
wire   [10:0] empty_16_fu_175_p1;
reg   [10:0] empty_16_reg_370;
wire  signed [63:0] sext_ln7_fu_179_p1;
reg  signed [63:0] sext_ln7_reg_375;
wire   [32:0] add_ln7_fu_187_p2;
reg   [32:0] add_ln7_reg_380;
wire   [0:0] icmp_ln7_fu_197_p2;
reg   [0:0] icmp_ln7_reg_385;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] add_ln7_1_fu_211_p2;
reg   [31:0] add_ln7_1_reg_394;
reg    ap_enable_reg_pp0_iter0;
wire   [10:0] add7_fu_236_p2;
reg   [10:0] add7_reg_399;
wire    ap_CS_fsm_state4;
wire  signed [63:0] sext_ln11_fu_241_p1;
wire  signed [63:0] sext_ln11_1_fu_250_p1;
reg  signed [63:0] sext_ln11_1_reg_409;
wire   [0:0] icmp_ln11_fu_254_p2;
reg   [0:0] icmp_ln11_reg_415;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [10:0] sub_ln12_fu_268_p2;
reg   [10:0] sub_ln12_reg_424;
wire   [63:0] add_ln11_1_fu_273_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln18_fu_291_p2;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state8_pp2_stage0_iter0;
wire    ap_block_state9_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
reg   [31:0] i_3_load_reg_452;
reg   [31:0] j_2_load_reg_457;
wire   [10:0] trunc_ln22_fu_312_p1;
reg   [10:0] trunc_ln22_reg_472;
wire   [63:0] add_ln18_fu_316_p2;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state7;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state8;
reg    ap_enable_reg_pp2_iter1;
reg   [10:0] temp_address0;
reg    temp_ce0;
reg    temp_we0;
wire   [31:0] temp_q0;
wire   [10:0] temp_address1;
reg    temp_ce1;
wire   [31:0] temp_q1;
reg  signed [31:0] ap_phi_mux_i_phi_fu_150_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln8_fu_206_p1;
wire   [63:0] i_cast2_fu_217_p1;
wire   [63:0] zext_ln12_fu_263_p1;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln12_1_fu_279_p1;
wire   [63:0] zext_ln19_fu_302_p1;
wire    ap_block_pp2_stage0;
wire   [63:0] zext_ln20_fu_307_p1;
wire   [63:0] zext_ln22_fu_328_p1;
reg   [31:0] i_3_fu_52;
wire   [31:0] i_4_fu_332_p2;
wire   [0:0] icmp_ln21_fu_322_p2;
reg   [31:0] ap_sig_allocacmp_i_3_load;
reg   [31:0] j_2_fu_56;
wire   [31:0] j_3_fu_342_p2;
reg   [31:0] ap_sig_allocacmp_j_2_load;
wire  signed [31:0] sext_ln7_fu_179_p0;
wire  signed [31:0] sext_ln7_1_fu_183_p0;
wire  signed [32:0] sext_ln7_1_fu_183_p1;
wire  signed [32:0] i_cast_fu_193_p1;
wire   [10:0] trunc_ln8_fu_202_p1;
wire  signed [31:0] trunc_ln11_fu_222_p0;
wire  signed [31:0] j_fu_225_p0;
wire   [10:0] trunc_ln11_fu_222_p1;
wire   [10:0] add_ln5_fu_230_p2;
wire   [31:0] j_fu_225_p2;
wire   [31:0] add_ln11_fu_245_p2;
wire   [10:0] empty_17_fu_259_p1;
wire    ap_CS_fsm_state10;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_condition_267;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
end

ms_mergesort_merge_1_temp #(
    .DataWidth( 32 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
temp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_address0),
    .ce0(temp_ce0),
    .we0(temp_we0),
    .d0(a_q0),
    .q0(temp_q0),
    .address1(temp_address1),
    .ce1(temp_ce1),
    .q1(temp_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state8))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state8);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_3_fu_52 <= start_r;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln21_fu_322_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        i_3_fu_52 <= i_4_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_147 <= start_r;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln7_reg_385 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_147 <= add_ln7_1_reg_394;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_1_reg_157 <= sext_ln11_fu_241_p1;
    end else if (((icmp_ln11_fu_254_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        j_1_reg_157 <= add_ln11_1_fu_273_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_2_fu_56 <= stop;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln21_fu_322_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        j_2_fu_56 <= j_3_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        k_reg_166 <= sext_ln7_reg_375;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln18_fu_291_p2 == 1'd1))) begin
        k_reg_166 <= add_ln18_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add7_reg_399 <= add7_fu_236_p2;
        sext_ln11_1_reg_409 <= sext_ln11_1_fu_250_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln7_fu_197_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln7_1_reg_394 <= add_ln7_1_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        add_ln7_reg_380 <= add_ln7_fu_187_p2;
        empty_16_reg_370 <= empty_16_fu_175_p1;
        sext_ln7_reg_375 <= sext_ln7_fu_179_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln18_fu_291_p2 == 1'd1))) begin
        i_3_load_reg_452 <= ap_sig_allocacmp_i_3_load;
        j_2_load_reg_457 <= ap_sig_allocacmp_j_2_load;
        trunc_ln22_reg_472 <= trunc_ln22_fu_312_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln11_reg_415 <= icmp_ln11_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln7_reg_385 <= icmp_ln7_fu_197_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_254_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sub_ln12_reg_424 <= sub_ln12_fu_268_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0) & (icmp_ln21_fu_322_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0) & (icmp_ln21_fu_322_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1)))) begin
        a_address0 = zext_ln22_fu_328_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        a_address0 = zext_ln12_fu_263_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_address0 = zext_ln8_fu_206_p1;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln21_fu_322_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln21_fu_322_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_267)) begin
        if ((icmp_ln21_fu_322_p2 == 1'd1)) begin
            a_d0 = temp_q1;
        end else if ((icmp_ln21_fu_322_p2 == 1'd0)) begin
            a_d0 = temp_q0;
        end else begin
            a_d0 = 'bx;
        end
    end else begin
        a_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln21_fu_322_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln21_fu_322_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1)))) begin
        a_we0 = 1'b1;
    end else begin
        a_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln7_fu_197_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln11_fu_254_p2 == 1'd0)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln18_fu_291_p2 == 1'd0)) begin
        ap_condition_pp2_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln7_reg_385 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_150_p4 = add_ln7_1_reg_394;
    end else begin
        ap_phi_mux_i_phi_fu_150_p4 = i_reg_147;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (icmp_ln21_fu_322_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        ap_sig_allocacmp_i_3_load = i_4_fu_332_p2;
    end else begin
        ap_sig_allocacmp_i_3_load = i_3_fu_52;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (icmp_ln21_fu_322_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        ap_sig_allocacmp_j_2_load = j_3_fu_342_p2;
    end else begin
        ap_sig_allocacmp_j_2_load = j_2_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        temp_address0 = zext_ln20_fu_307_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        temp_address0 = zext_ln12_1_fu_279_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        temp_address0 = i_cast2_fu_217_p1;
    end else begin
        temp_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1)))) begin
        temp_ce0 = 1'b1;
    end else begin
        temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        temp_ce1 = 1'b1;
    end else begin
        temp_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln7_reg_385 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln11_reg_415 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1)))) begin
        temp_we0 = 1'b1;
    end else begin
        temp_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln7_fu_197_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln7_fu_197_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln11_fu_254_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln11_fu_254_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln18_fu_291_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln18_fu_291_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add7_fu_236_p2 = (add_ln5_fu_230_p2 + empty_16_reg_370);

assign add_ln11_1_fu_273_p2 = (j_1_reg_157 + 64'd1);

assign add_ln11_fu_245_p2 = (stop + 32'd1);

assign add_ln18_fu_316_p2 = (k_reg_166 + 64'd1);

assign add_ln5_fu_230_p2 = (trunc_ln11_fu_222_p1 + 11'd1);

assign add_ln7_1_fu_211_p2 = ($signed(ap_phi_mux_i_phi_fu_150_p4) + $signed(32'd1));

assign add_ln7_fu_187_p2 = ($signed(sext_ln7_1_fu_183_p1) + $signed(33'd1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_267 = ((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign empty_16_fu_175_p1 = stop[10:0];

assign empty_17_fu_259_p1 = j_1_reg_157[10:0];

assign i_4_fu_332_p2 = (i_3_load_reg_452 + 32'd1);

assign i_cast2_fu_217_p1 = $unsigned(i_reg_147);

assign i_cast_fu_193_p1 = ap_phi_mux_i_phi_fu_150_p4;

assign icmp_ln11_fu_254_p2 = (($signed(j_1_reg_157) < $signed(sext_ln11_1_reg_409)) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_291_p2 = (($signed(k_reg_166) < $signed(sext_ln11_1_reg_409)) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_322_p2 = (($signed(temp_q1) < $signed(temp_q0)) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_197_p2 = (($signed(i_cast_fu_193_p1) < $signed(add_ln7_reg_380)) ? 1'b1 : 1'b0);

assign j_3_fu_342_p2 = ($signed(j_2_load_reg_457) + $signed(32'd4294967295));

assign j_fu_225_p0 = m;

assign j_fu_225_p2 = ($signed(j_fu_225_p0) + $signed(32'd1));

assign sext_ln11_1_fu_250_p1 = $signed(add_ln11_fu_245_p2);

assign sext_ln11_fu_241_p1 = $signed(j_fu_225_p2);

assign sext_ln7_1_fu_183_p0 = m;

assign sext_ln7_1_fu_183_p1 = sext_ln7_1_fu_183_p0;

assign sext_ln7_fu_179_p0 = start_r;

assign sext_ln7_fu_179_p1 = sext_ln7_fu_179_p0;

assign sub_ln12_fu_268_p2 = (add7_reg_399 - empty_17_fu_259_p1);

assign temp_address1 = zext_ln19_fu_302_p1;

assign trunc_ln11_fu_222_p0 = m;

assign trunc_ln11_fu_222_p1 = trunc_ln11_fu_222_p0[10:0];

assign trunc_ln22_fu_312_p1 = k_reg_166[10:0];

assign trunc_ln8_fu_202_p1 = ap_phi_mux_i_phi_fu_150_p4[10:0];

assign zext_ln12_1_fu_279_p1 = sub_ln12_reg_424;

assign zext_ln12_fu_263_p1 = empty_17_fu_259_p1;

assign zext_ln19_fu_302_p1 = ap_sig_allocacmp_j_2_load;

assign zext_ln20_fu_307_p1 = ap_sig_allocacmp_i_3_load;

assign zext_ln22_fu_328_p1 = trunc_ln22_reg_472;

assign zext_ln8_fu_206_p1 = trunc_ln8_fu_202_p1;

endmodule //ms_mergesort_merge_1
