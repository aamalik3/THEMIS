// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ms_mergesort_ms_mergesort,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.365750,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=823,HLS_SYN_LUT=1112,HLS_VERSION=2020_2}" *)

module custom_IP (
        s_axi_clk,
        s_axi_rst_n,
        s_axi_BUS_A_AWVALID,
        s_axi_BUS_A_AWREADY,
        s_axi_BUS_A_AWADDR,
        s_axi_BUS_A_WVALID,
        s_axi_BUS_A_WREADY,
        s_axi_BUS_A_WDATA,
        s_axi_BUS_A_WSTRB,
        s_axi_BUS_A_ARVALID,
        s_axi_BUS_A_ARREADY,
        s_axi_BUS_A_ARADDR,
        s_axi_BUS_A_RVALID,
        s_axi_BUS_A_RREADY,
        s_axi_BUS_A_RDATA,
        s_axi_BUS_A_RRESP,
        s_axi_BUS_A_BVALID,
        s_axi_BUS_A_BREADY,
        s_axi_BUS_A_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;
parameter    C_S_AXI_BUS_A_DATA_WIDTH = 32;
parameter    C_S_AXI_BUS_A_ADDR_WIDTH = 14;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_BUS_A_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   s_axi_clk;
input   s_axi_rst_n;
input   s_axi_BUS_A_AWVALID;
output   s_axi_BUS_A_AWREADY;
input  [31:0] s_axi_BUS_A_AWADDR;
input   s_axi_BUS_A_WVALID;
output   s_axi_BUS_A_WREADY;
input  [C_S_AXI_BUS_A_DATA_WIDTH - 1:0] s_axi_BUS_A_WDATA;
input  [C_S_AXI_BUS_A_WSTRB_WIDTH - 1:0] s_axi_BUS_A_WSTRB;
input   s_axi_BUS_A_ARVALID;
output   s_axi_BUS_A_ARREADY;
input  [31:0] s_axi_BUS_A_ARADDR;
output   s_axi_BUS_A_RVALID;
input   s_axi_BUS_A_RREADY;
output  [C_S_AXI_BUS_A_DATA_WIDTH - 1:0] s_axi_BUS_A_RDATA;
output  [1:0] s_axi_BUS_A_RRESP;
output   s_axi_BUS_A_BVALID;
input   s_axi_BUS_A_BREADY;
output  [1:0] s_axi_BUS_A_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    a_ce0;
reg    a_we0;
wire   [31:0] a_q0;
wire   [31:0] m_1_fu_105_p2;
reg   [31:0] m_1_reg_169;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln43_fu_99_p2;
wire   [31:0] mid_fu_133_p2;
reg   [31:0] mid_reg_178;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln44_fu_121_p2;
wire   [31:0] to_fu_139_p2;
reg   [31:0] to_reg_183;
wire   [0:0] icmp_ln48_fu_155_p2;
reg   [0:0] icmp_ln48_reg_188;
wire   [31:0] i_fu_161_p2;
wire    ap_CS_fsm_state5;
wire    grp_merge_1_fu_78_ap_start;
wire    grp_merge_1_fu_78_ap_done;
wire    grp_merge_1_fu_78_ap_idle;
wire    grp_merge_1_fu_78_ap_ready;
wire   [10:0] grp_merge_1_fu_78_a_address0;
wire    grp_merge_1_fu_78_a_ce0;
wire    grp_merge_1_fu_78_a_we0;
wire   [31:0] grp_merge_1_fu_78_a_d0;
reg   [31:0] grp_merge_1_fu_78_stop;
reg   [31:0] m_reg_54;
reg   [31:0] i_2_reg_66;
reg    ap_block_state5_on_subcall_done;
reg    grp_merge_1_fu_78_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state6;
wire   [20:0] tmp_fu_89_p4;
wire   [20:0] tmp_1_fu_111_p4;
wire   [31:0] add_ln46_fu_127_p2;
wire   [20:0] tmp_2_fu_145_p4;
reg   [5:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_merge_1_fu_78_ap_start_reg = 1'b0;
end

ms_mergesort_BUS_A_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_BUS_A_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_BUS_A_DATA_WIDTH ))
BUS_A_s_axi_U(
    .AWVALID(s_axi_BUS_A_AWVALID),
    .AWREADY(s_axi_BUS_A_AWREADY),
    .AWADDR(s_axi_BUS_A_AWADDR),
    .WVALID(s_axi_BUS_A_WVALID),
    .WREADY(s_axi_BUS_A_WREADY),
    .WDATA(s_axi_BUS_A_WDATA),
    .WSTRB(s_axi_BUS_A_WSTRB),
    .ARVALID(s_axi_BUS_A_ARVALID),
    .ARREADY(s_axi_BUS_A_ARREADY),
    .ARADDR(s_axi_BUS_A_ARADDR),
    .RVALID(s_axi_BUS_A_RVALID),
    .RREADY(s_axi_BUS_A_RREADY),
    .RDATA(s_axi_BUS_A_RDATA),
    .RRESP(s_axi_BUS_A_RRESP),
    .BVALID(s_axi_BUS_A_BVALID),
    .BREADY(s_axi_BUS_A_BREADY),
    .BRESP(s_axi_BUS_A_BRESP),
    .ACLK(s_axi_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .a_address0(grp_merge_1_fu_78_a_address0),
    .a_ce0(a_ce0),
    .a_we0(a_we0),
    .a_d0(grp_merge_1_fu_78_a_d0),
    .a_q0(a_q0),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

ms_mergesort_merge_1 grp_merge_1_fu_78(
    .ap_clk(s_axi_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_merge_1_fu_78_ap_start),
    .ap_done(grp_merge_1_fu_78_ap_done),
    .ap_idle(grp_merge_1_fu_78_ap_idle),
    .ap_ready(grp_merge_1_fu_78_ap_ready),
    .a_address0(grp_merge_1_fu_78_a_address0),
    .a_ce0(grp_merge_1_fu_78_a_ce0),
    .a_we0(grp_merge_1_fu_78_a_we0),
    .a_d0(grp_merge_1_fu_78_a_d0),
    .a_q0(a_q0),
    .start_r(i_2_reg_66),
    .m(mid_reg_178),
    .stop(grp_merge_1_fu_78_stop)
);

always @ (posedge s_axi_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge s_axi_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_merge_1_fu_78_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
            grp_merge_1_fu_78_ap_start_reg <= 1'b1;
        end else if ((grp_merge_1_fu_78_ap_ready == 1'b1)) begin
            grp_merge_1_fu_78_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge s_axi_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
        i_2_reg_66 <= i_fu_161_p2;
    end else if (((icmp_ln43_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_2_reg_66 <= 32'd0;
    end
end

always @ (posedge s_axi_clk) begin
    if (((icmp_ln44_fu_121_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_reg_54 <= m_1_reg_169;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        m_reg_54 <= 32'd1;
    end
end

always @ (posedge s_axi_clk) begin
    if (((icmp_ln44_fu_121_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        icmp_ln48_reg_188 <= icmp_ln48_fu_155_p2;
        mid_reg_178 <= mid_fu_133_p2;
        to_reg_183 <= to_fu_139_p2;
    end
end

always @ (posedge s_axi_clk) begin
    if (((icmp_ln43_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_1_reg_169[31 : 1] <= m_1_fu_105_p2[31 : 1];
    end
end

always @ (*) begin
    if ((((icmp_ln48_reg_188 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln48_reg_188 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        a_ce0 = grp_merge_1_fu_78_a_ce0;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln48_reg_188 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln48_reg_188 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        a_we0 = grp_merge_1_fu_78_a_we0;
    end else begin
        a_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((icmp_ln48_reg_188 == 1'd1)) begin
            grp_merge_1_fu_78_stop = to_reg_183;
        end else if ((icmp_ln48_reg_188 == 1'd0)) begin
            grp_merge_1_fu_78_stop = 32'd2048;
        end else begin
            grp_merge_1_fu_78_stop = 'bx;
        end
    end else begin
        grp_merge_1_fu_78_stop = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln43_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln44_fu_121_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((icmp_ln48_fu_155_p2 == 1'd1) & (icmp_ln44_fu_121_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln46_fu_127_p2 = (i_2_reg_66 + m_reg_54);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state5_on_subcall_done = (((icmp_ln48_reg_188 == 1'd1) & (grp_merge_1_fu_78_ap_done == 1'b0)) | ((icmp_ln48_reg_188 == 1'd0) & (grp_merge_1_fu_78_ap_done == 1'b0)));
end

always @ (*) begin
    ap_rst_n_inv = ~s_axi_rst_n;
end

assign grp_merge_1_fu_78_ap_start = grp_merge_1_fu_78_ap_start_reg;

assign i_fu_161_p2 = (m_1_reg_169 + i_2_reg_66);

assign icmp_ln43_fu_99_p2 = (($signed(tmp_fu_89_p4) < $signed(21'd1)) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_121_p2 = (($signed(tmp_1_fu_111_p4) < $signed(21'd1)) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_155_p2 = (($signed(tmp_2_fu_145_p4) < $signed(21'd1)) ? 1'b1 : 1'b0);

assign m_1_fu_105_p2 = m_reg_54 << 32'd1;

assign mid_fu_133_p2 = ($signed(add_ln46_fu_127_p2) + $signed(32'd4294967295));

assign tmp_1_fu_111_p4 = {{i_2_reg_66[31:11]}};

assign tmp_2_fu_145_p4 = {{to_fu_139_p2[31:11]}};

assign tmp_fu_89_p4 = {{m_reg_54[31:11]}};

assign to_fu_139_p2 = (mid_fu_133_p2 + m_reg_54);

always @ (posedge s_axi_clk) begin
    m_1_reg_169[0] <= 1'b0;
end

endmodule //ms_mergesort
