// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="needwun_needwun,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.574000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=88,HLS_SYN_DSP=0,HLS_SYN_FF=1228,HLS_SYN_LUT=1899,HLS_VERSION=2020_2}" *)

module custom_IP (
        s_axi_clk,
        s_axi_rst_n,
        s_axi_BUS_A_AWVALID,
        s_axi_BUS_A_AWREADY,
        s_axi_BUS_A_AWADDR,
        s_axi_BUS_A_WVALID,
        s_axi_BUS_A_WREADY,
        s_axi_BUS_A_WDATA,
        s_axi_BUS_A_WSTRB,
        s_axi_BUS_A_ARVALID,
        s_axi_BUS_A_ARREADY,
        s_axi_BUS_A_ARADDR,
        s_axi_BUS_A_RVALID,
        s_axi_BUS_A_RREADY,
        s_axi_BUS_A_RDATA,
        s_axi_BUS_A_RRESP,
        s_axi_BUS_A_BVALID,
        s_axi_BUS_A_BREADY,
        s_axi_BUS_A_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_pp2_stage0 = 17'd128;
parameter    ap_ST_fsm_pp2_stage1 = 17'd256;
parameter    ap_ST_fsm_pp2_stage2 = 17'd512;
parameter    ap_ST_fsm_state14 = 17'd1024;
parameter    ap_ST_fsm_pp3_stage0 = 17'd2048;
parameter    ap_ST_fsm_state18 = 17'd4096;
parameter    ap_ST_fsm_state19 = 17'd8192;
parameter    ap_ST_fsm_state20 = 17'd16384;
parameter    ap_ST_fsm_state21 = 17'd32768;
parameter    ap_ST_fsm_state22 = 17'd65536;
parameter    C_S_AXI_BUS_A_DATA_WIDTH = 32;
parameter    C_S_AXI_BUS_A_ADDR_WIDTH = 18;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_BUS_A_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   s_axi_clk;
input   s_axi_rst_n;
input   s_axi_BUS_A_AWVALID;
output   s_axi_BUS_A_AWREADY;
input  [31:0] s_axi_BUS_A_AWADDR;
input   s_axi_BUS_A_WVALID;
output   s_axi_BUS_A_WREADY;
input  [C_S_AXI_BUS_A_DATA_WIDTH - 1:0] s_axi_BUS_A_WDATA;
input  [C_S_AXI_BUS_A_WSTRB_WIDTH - 1:0] s_axi_BUS_A_WSTRB;
input   s_axi_BUS_A_ARVALID;
output   s_axi_BUS_A_ARREADY;
input  [31:0] s_axi_BUS_A_ARADDR;
output   s_axi_BUS_A_RVALID;
input   s_axi_BUS_A_RREADY;
output  [C_S_AXI_BUS_A_DATA_WIDTH - 1:0] s_axi_BUS_A_RDATA;
output  [1:0] s_axi_BUS_A_RRESP;
output   s_axi_BUS_A_BVALID;
input   s_axi_BUS_A_BREADY;
output  [1:0] s_axi_BUS_A_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [6:0] SEQA_address0;
reg    SEQA_ce0;
wire   [7:0] SEQA_q0;
reg   [6:0] SEQB_address0;
reg    SEQB_ce0;
wire   [7:0] SEQB_q0;
reg   [7:0] alignedA_address0;
reg    alignedA_ce0;
reg    alignedA_we0;
reg   [7:0] alignedA_d0;
reg   [7:0] alignedB_address0;
reg    alignedB_ce0;
reg    alignedB_we0;
reg   [7:0] alignedB_d0;
reg   [14:0] M_address0;
reg    M_ce0;
reg    M_we0;
reg   [31:0] M_d0;
wire   [31:0] M_q0;
reg   [14:0] ptr_address0;
reg    ptr_ce0;
reg    ptr_we0;
reg   [7:0] ptr_d0;
wire   [7:0] ptr_q0;
reg   [7:0] a_idx_2_reg_396;
reg   [31:0] store_forwarded_reg_408;
reg   [63:0] b_str_idx_2_reg_417;
wire   [7:0] add_ln31_fu_473_p2;
wire    ap_CS_fsm_state2;
wire   [7:0] add_ln34_fu_501_p2;
wire    ap_CS_fsm_state4;
wire   [7:0] add_ln39_1_fu_547_p2;
reg   [7:0] add_ln39_1_reg_957;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln39_fu_553_p2;
wire   [13:0] empty_36_fu_627_p2;
reg   [13:0] empty_36_reg_966;
wire   [8:0] zext_ln39_fu_643_p1;
reg   [8:0] zext_ln39_reg_995;
wire    ap_CS_fsm_state7;
wire   [14:0] p_cast4_fu_647_p1;
reg   [14:0] p_cast4_reg_1000;
wire   [14:0] p_shl1_fu_650_p3;
reg   [14:0] p_shl1_reg_1006;
reg   [7:0] SEQB_load_reg_1011;
wire   [0:0] icmp_ln40_fu_658_p2;
reg   [0:0] icmp_ln40_reg_1021;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state8_pp2_stage0_iter0;
wire    ap_block_state11_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln40_reg_1021_pp2_iter1_reg;
wire   [0:0] icmp_ln41_fu_693_p2;
reg   [0:0] icmp_ln41_reg_1035;
wire    ap_CS_fsm_pp2_stage1;
wire    ap_block_state9_pp2_stage1_iter0;
wire    ap_block_state12_pp2_stage1_iter1;
wire    ap_block_pp2_stage1_11001;
reg   [31:0] M_load_1_reg_1040;
reg    ap_enable_reg_pp2_iter0;
wire   [31:0] up_left_fu_719_p2;
reg   [31:0] up_left_reg_1050;
wire    ap_CS_fsm_pp2_stage2;
wire    ap_block_state10_pp2_stage2_iter0;
wire    ap_block_state13_pp2_stage2_iter1;
wire    ap_block_pp2_stage2_11001;
wire   [31:0] up_fu_724_p2;
reg   [31:0] up_reg_1056;
wire   [31:0] left_fu_730_p2;
reg   [31:0] left_reg_1062;
wire   [0:0] icmp_ln54_fu_736_p2;
reg   [0:0] icmp_ln54_reg_1068;
wire   [8:0] add_ln56_1_fu_742_p2;
reg   [8:0] add_ln56_1_reg_1073;
wire   [7:0] add_ln40_fu_747_p2;
reg   [7:0] add_ln40_reg_1078;
wire   [31:0] max_fu_763_p3;
reg   [31:0] max_reg_1083;
reg    ap_enable_reg_pp2_iter1;
wire   [63:0] zext_ln56_1_fu_778_p1;
reg   [63:0] zext_ln56_1_reg_1089;
wire   [7:0] add_ln39_fu_794_p2;
wire    ap_CS_fsm_state14;
reg   [31:0] b_idx_4_reg_1105;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state15_pp3_stage0_iter0;
wire    ap_block_state16_pp3_stage0_iter1;
wire    ap_block_state17_pp3_stage0_iter2;
wire    ap_block_pp3_stage0_11001;
reg   [31:0] a_idx_4_reg_1110;
wire   [0:0] or_ln73_fu_818_p2;
reg   [0:0] or_ln73_reg_1115;
reg   [0:0] or_ln73_reg_1115_pp3_iter1_reg;
wire   [63:0] add_ln77_fu_861_p2;
reg   [63:0] add_ln77_reg_1124;
reg    ap_enable_reg_pp3_iter1;
reg   [7:0] ptr_load_reg_1129;
wire   [31:0] trunc_ln29_fu_887_p1;
reg   [31:0] trunc_ln29_reg_1153;
wire    ap_CS_fsm_state18;
wire   [0:0] icmp_ln94_fu_901_p2;
wire   [31:0] add_ln94_fu_918_p2;
wire    ap_CS_fsm_state19;
wire   [0:0] icmp_ln94_1_fu_907_p2;
wire   [31:0] add_ln97_fu_935_p2;
wire    ap_CS_fsm_state21;
wire   [0:0] icmp_ln97_fu_924_p2;
wire    ap_block_pp2_stage2_subdone;
reg    ap_condition_pp2_exit_iter0_state10;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_flush_enable;
reg    ap_condition_pp3_exit_iter1_state16;
reg    ap_enable_reg_pp3_iter2;
reg   [7:0] a_idx_reg_351;
wire   [0:0] icmp_ln31_fu_479_p2;
reg   [7:0] b_idx_reg_362;
wire   [0:0] icmp_ln34_fu_507_p2;
wire    ap_CS_fsm_state3;
reg   [7:0] indvar_reg_373;
wire    ap_CS_fsm_state5;
reg   [7:0] b_idx_1_reg_384;
reg   [7:0] ap_phi_mux_a_idx_2_phi_fu_400_p4;
wire    ap_block_pp2_stage0;
reg   [31:0] ap_phi_mux_store_forwarded_phi_fu_411_p4;
wire    ap_block_pp2_stage2;
reg   [63:0] ap_phi_mux_b_str_idx_2_phi_fu_427_p4;
wire    ap_block_pp3_stage0;
reg   [31:0] a_str_idx_1_reg_435;
reg   [31:0] b_str_idx_reg_444;
wire    ap_CS_fsm_state20;
wire   [63:0] trunc_ln32_cast_fu_485_p1;
wire   [63:0] zext_ln35_fu_531_p1;
wire   [63:0] p_cast8_fu_606_p1;
wire   [63:0] p_cast7_fu_595_p1;
wire   [63:0] zext_ln41_fu_670_p1;
wire   [63:0] zext_ln50_fu_684_p1;
wire   [63:0] zext_ln51_fu_703_p1;
wire    ap_block_pp2_stage1;
wire   [0:0] icmp_ln57_fu_784_p2;
wire   [14:0] ptr_addr_1_gep_fu_214_p3;
wire   [63:0] zext_ln75_fu_856_p1;
wire   [63:0] zext_ln82_fu_867_p1;
wire   [63:0] zext_ln76_fu_872_p1;
wire   [63:0] zext_ln77_fu_877_p1;
wire   [63:0] zext_ln88_fu_882_p1;
wire   [7:0] alignedA_addr_1_gep_fu_299_p3;
wire   [7:0] alignedB_addr_1_gep_fu_307_p3;
wire   [7:0] alignedA_addr_gep_fu_316_p3;
wire   [7:0] alignedB_addr_gep_fu_325_p3;
wire   [63:0] a_str_idx_1_cast_fu_913_p1;
wire   [63:0] b_str_idx_cast_fu_930_p1;
reg   [31:0] b_idx_2_fu_120;
wire   [31:0] grp_fu_463_p2;
reg   [31:0] ap_sig_allocacmp_b_idx_4;
reg   [31:0] a_idx_1_fu_124;
wire   [31:0] grp_fu_453_p2;
reg   [31:0] ap_sig_allocacmp_a_idx_4;
wire  signed [31:0] sext_ln32_fu_496_p1;
wire  signed [31:0] sext_ln35_fu_542_p1;
wire   [0:0] icmp_ln59_fu_789_p2;
wire   [7:0] sub_ln32_fu_490_p2;
wire   [14:0] shl_ln_fu_517_p3;
wire   [14:0] trunc_ln35_cast_fu_513_p1;
wire   [14:0] add_ln35_fu_525_p2;
wire   [7:0] sub_ln35_fu_536_p2;
wire   [6:0] empty_32_fu_563_p1;
wire   [13:0] p_shl3_fu_567_p3;
wire   [8:0] zext_ln39_1_fu_559_p1;
wire   [8:0] tmp_fu_579_p2;
wire   [14:0] tmp_cast_fu_585_p1;
wire   [14:0] p_shl3_cast_fu_575_p1;
wire   [14:0] empty_33_fu_589_p2;
wire   [7:0] empty_34_fu_600_p2;
wire   [6:0] empty_35_fu_615_p1;
wire   [13:0] p_shl2_fu_619_p3;
wire   [13:0] p_cast_fu_611_p1;
wire   [7:0] add_ln41_fu_664_p2;
wire   [14:0] zext_ln41_1_fu_675_p1;
wire   [14:0] add_ln50_fu_679_p2;
wire   [14:0] a_idx_2_cast_fu_689_p1;
wire   [14:0] add_ln51_fu_698_p2;
wire   [31:0] select_ln50_fu_712_p3;
wire   [8:0] a_idx_2_cast6_fu_708_p1;
wire   [31:0] select_ln54_fu_753_p3;
wire   [0:0] icmp_ln54_1_fu_758_p2;
wire   [14:0] zext_ln56_fu_770_p1;
wire   [14:0] add_ln56_fu_773_p2;
wire   [0:0] icmp_ln73_fu_806_p2;
wire   [0:0] icmp_ln73_1_fu_812_p2;
wire   [7:0] trunc_ln74_fu_832_p1;
wire   [14:0] empty_39_fu_828_p1;
wire   [14:0] empty_38_fu_824_p1;
wire   [14:0] add_ln75_1_fu_844_p2;
wire   [14:0] shl_ln1_fu_836_p3;
wire   [14:0] add_ln75_fu_850_p2;
wire   [23:0] tmp_1_fu_891_p4;
wire    ap_CS_fsm_state22;
reg   [16:0] ap_NS_fsm;
wire    ap_block_pp2_stage0_subdone;
wire    ap_block_pp2_stage1_subdone;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_condition_400;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
end

needwun_BUS_A_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_BUS_A_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_BUS_A_DATA_WIDTH ))
BUS_A_s_axi_U(
    .AWVALID(s_axi_BUS_A_AWVALID),
    .AWREADY(s_axi_BUS_A_AWREADY),
    .AWADDR(s_axi_BUS_A_AWADDR),
    .WVALID(s_axi_BUS_A_WVALID),
    .WREADY(s_axi_BUS_A_WREADY),
    .WDATA(s_axi_BUS_A_WDATA),
    .WSTRB(s_axi_BUS_A_WSTRB),
    .ARVALID(s_axi_BUS_A_ARVALID),
    .ARREADY(s_axi_BUS_A_ARREADY),
    .ARADDR(s_axi_BUS_A_ARADDR),
    .RVALID(s_axi_BUS_A_RVALID),
    .RREADY(s_axi_BUS_A_RREADY),
    .RDATA(s_axi_BUS_A_RDATA),
    .RRESP(s_axi_BUS_A_RRESP),
    .BVALID(s_axi_BUS_A_BVALID),
    .BREADY(s_axi_BUS_A_BREADY),
    .BRESP(s_axi_BUS_A_BRESP),
    .ACLK(s_axi_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .SEQA_address0(SEQA_address0),
    .SEQA_ce0(SEQA_ce0),
    .SEQA_q0(SEQA_q0),
    .SEQB_address0(SEQB_address0),
    .SEQB_ce0(SEQB_ce0),
    .SEQB_q0(SEQB_q0),
    .alignedA_address0(alignedA_address0),
    .alignedA_ce0(alignedA_ce0),
    .alignedA_we0(alignedA_we0),
    .alignedA_d0(alignedA_d0),
    .alignedB_address0(alignedB_address0),
    .alignedB_ce0(alignedB_ce0),
    .alignedB_we0(alignedB_we0),
    .alignedB_d0(alignedB_d0),
    .ptr_address0(ptr_address0),
    .ptr_ce0(ptr_ce0),
    .ptr_we0(ptr_we0),
    .ptr_d0(ptr_d0),
    .ptr_q0(ptr_q0),
    .M_address0(M_address0),
    .M_ce0(M_ce0),
    .M_we0(M_we0),
    .M_d0(M_d0),
    .M_q0(M_q0),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

always @ (posedge s_axi_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge s_axi_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge s_axi_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2_subdone))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state10);
        end else if (((1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2_subdone))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge s_axi_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp3_flush_enable)) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln39_fu_553_p2 == 1'd1))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge s_axi_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if ((((ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_condition_pp3_exit_iter1_state16) & (1'b0 == ap_block_pp3_stage0_subdone)) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln39_fu_553_p2 == 1'd1)))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge s_axi_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter1_state16) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter0;
        end else if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln39_fu_553_p2 == 1'd1))) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge s_axi_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln39_fu_553_p2 == 1'd1))) begin
        a_idx_1_fu_124 <= 32'd128;
    end else if ((((ptr_q0 == 8'd92) & (ap_enable_reg_pp3_iter1 == 1'b1) & (or_ln73_reg_1115 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ptr_q0 == 8'd60) & (ap_enable_reg_pp3_iter1 == 1'b1) & (or_ln73_reg_1115 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        a_idx_1_fu_124 <= grp_fu_453_p2;
    end
end

always @ (posedge s_axi_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln40_reg_1021 == 1'd0))) begin
        a_idx_2_reg_396 <= add_ln40_reg_1078;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        a_idx_2_reg_396 <= 8'd1;
    end
end

always @ (posedge s_axi_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        a_idx_reg_351 <= 8'd0;
    end else if (((icmp_ln31_fu_479_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_idx_reg_351 <= add_ln31_fu_473_p2;
    end
end

always @ (posedge s_axi_clk) begin
    if (((icmp_ln94_fu_901_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        a_str_idx_1_reg_435 <= trunc_ln29_fu_887_p1;
    end else if (((icmp_ln94_1_fu_907_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        a_str_idx_1_reg_435 <= add_ln94_fu_918_p2;
    end
end

always @ (posedge s_axi_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        b_idx_1_reg_384 <= 8'd1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        b_idx_1_reg_384 <= add_ln39_fu_794_p2;
    end
end

always @ (posedge s_axi_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln39_fu_553_p2 == 1'd1))) begin
        b_idx_2_fu_120 <= 32'd128;
    end else if (((~(ptr_q0 == 8'd92) & ~(ptr_q0 == 8'd60) & (ap_enable_reg_pp3_iter1 == 1'b1) & (or_ln73_reg_1115 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ptr_q0 == 8'd92) & (ap_enable_reg_pp3_iter1 == 1'b1) & (or_ln73_reg_1115 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        b_idx_2_fu_120 <= grp_fu_463_p2;
    end
end

always @ (posedge s_axi_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_idx_reg_362 <= 8'd0;
    end else if (((icmp_ln34_fu_507_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        b_idx_reg_362 <= add_ln34_fu_501_p2;
    end
end

always @ (posedge s_axi_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln39_fu_553_p2 == 1'd1))) begin
        b_str_idx_2_reg_417 <= 64'd0;
    end else if (((ap_enable_reg_pp3_iter2 == 1'b1) & (or_ln73_reg_1115_pp3_iter1_reg == 1'd1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        b_str_idx_2_reg_417 <= add_ln77_reg_1124;
    end
end

always @ (posedge s_axi_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        b_str_idx_reg_444 <= trunc_ln29_reg_1153;
    end else if (((icmp_ln97_fu_924_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        b_str_idx_reg_444 <= add_ln97_fu_935_p2;
    end
end

always @ (posedge s_axi_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvar_reg_373 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        indvar_reg_373 <= add_ln39_1_reg_957;
    end
end

always @ (posedge s_axi_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2) & (icmp_ln40_reg_1021_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage2_11001))) begin
        store_forwarded_reg_408 <= max_reg_1083;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        store_forwarded_reg_408 <= M_q0;
    end
end

always @ (posedge s_axi_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001) & (icmp_ln40_reg_1021 == 1'd0))) begin
        M_load_1_reg_1040 <= M_q0;
    end
end

always @ (posedge s_axi_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        SEQB_load_reg_1011 <= SEQB_q0;
        p_cast4_reg_1000[13 : 0] <= p_cast4_fu_647_p1[13 : 0];
        p_shl1_reg_1006[14 : 7] <= p_shl1_fu_650_p3[14 : 7];
        zext_ln39_reg_995[7 : 0] <= zext_ln39_fu_643_p1[7 : 0];
    end
end

always @ (posedge s_axi_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        a_idx_4_reg_1110 <= ap_sig_allocacmp_a_idx_4;
        b_idx_4_reg_1105 <= ap_sig_allocacmp_b_idx_4;
        or_ln73_reg_1115 <= or_ln73_fu_818_p2;
        or_ln73_reg_1115_pp3_iter1_reg <= or_ln73_reg_1115;
    end
end

always @ (posedge s_axi_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln39_1_reg_957 <= add_ln39_1_fu_547_p2;
    end
end

always @ (posedge s_axi_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2_11001) & (icmp_ln40_reg_1021 == 1'd0))) begin
        add_ln40_reg_1078 <= add_ln40_fu_747_p2;
    end
end

always @ (posedge s_axi_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2_11001) & (icmp_ln40_reg_1021 == 1'd0))) begin
        add_ln56_1_reg_1073 <= add_ln56_1_fu_742_p2;
        icmp_ln54_reg_1068 <= icmp_ln54_fu_736_p2;
        left_reg_1062 <= left_fu_730_p2;
        up_left_reg_1050 <= up_left_fu_719_p2;
        up_reg_1056 <= up_fu_724_p2;
    end
end

always @ (posedge s_axi_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        add_ln77_reg_1124 <= add_ln77_fu_861_p2;
    end
end

always @ (posedge s_axi_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln39_fu_553_p2 == 1'd0))) begin
        empty_36_reg_966 <= empty_36_fu_627_p2;
    end
end

always @ (posedge s_axi_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln40_reg_1021 <= icmp_ln40_fu_658_p2;
        icmp_ln40_reg_1021_pp2_iter1_reg <= icmp_ln40_reg_1021;
    end
end

always @ (posedge s_axi_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001) & (icmp_ln40_reg_1021 == 1'd0))) begin
        icmp_ln41_reg_1035 <= icmp_ln41_fu_693_p2;
    end
end

always @ (posedge s_axi_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln40_reg_1021 == 1'd0))) begin
        max_reg_1083 <= max_fu_763_p3;
    end
end

always @ (posedge s_axi_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (or_ln73_reg_1115 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        ptr_load_reg_1129 <= ptr_q0;
    end
end

always @ (posedge s_axi_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        trunc_ln29_reg_1153 <= trunc_ln29_fu_887_p1;
    end
end

always @ (posedge s_axi_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln40_reg_1021 == 1'd0))) begin
        zext_ln56_1_reg_1089[14 : 0] <= zext_ln56_1_fu_778_p1[14 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2))) begin
        M_address0 = zext_ln56_1_reg_1089;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1))) begin
        M_address0 = zext_ln51_fu_703_p1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        M_address0 = zext_ln50_fu_684_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        M_address0 = p_cast7_fu_595_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        M_address0 = zext_ln35_fu_531_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        M_address0 = trunc_ln32_cast_fu_485_p1;
    end else begin
        M_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        M_ce0 = 1'b1;
    end else begin
        M_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2))) begin
        M_d0 = max_reg_1083;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        M_d0 = sext_ln35_fu_542_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        M_d0 = sext_ln32_fu_496_p1;
    end else begin
        M_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln34_fu_507_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln31_fu_479_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2) & (icmp_ln40_reg_1021_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage2_11001)))) begin
        M_we0 = 1'b1;
    end else begin
        M_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ptr_q0 == 8'd92) & (ap_enable_reg_pp3_iter1 == 1'b1) & (or_ln73_reg_1115 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        SEQA_address0 = zext_ln76_fu_872_p1;
    end else if (((ptr_q0 == 8'd60) & (ap_enable_reg_pp3_iter1 == 1'b1) & (or_ln73_reg_1115 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        SEQA_address0 = zext_ln82_fu_867_p1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        SEQA_address0 = zext_ln41_fu_670_p1;
    end else begin
        SEQA_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ptr_q0 == 8'd92) & (ap_enable_reg_pp3_iter1 == 1'b1) & (or_ln73_reg_1115 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ptr_q0 == 8'd60) & (ap_enable_reg_pp3_iter1 == 1'b1) & (or_ln73_reg_1115 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        SEQA_ce0 = 1'b1;
    end else begin
        SEQA_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(ptr_q0 == 8'd92) & ~(ptr_q0 == 8'd60) & (ap_enable_reg_pp3_iter1 == 1'b1) & (or_ln73_reg_1115 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        SEQB_address0 = zext_ln88_fu_882_p1;
    end else if (((ptr_q0 == 8'd92) & (ap_enable_reg_pp3_iter1 == 1'b1) & (or_ln73_reg_1115 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        SEQB_address0 = zext_ln77_fu_877_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        SEQB_address0 = p_cast8_fu_606_p1;
    end else begin
        SEQB_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (~(ptr_q0 == 8'd92) & ~(ptr_q0 == 8'd60) & (ap_enable_reg_pp3_iter1 == 1'b1) & (or_ln73_reg_1115 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ptr_q0 == 8'd92) & (ap_enable_reg_pp3_iter1 == 1'b1) & (or_ln73_reg_1115 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        SEQB_ce0 = 1'b1;
    end else begin
        SEQB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        alignedA_address0 = a_str_idx_1_cast_fu_913_p1;
    end else if ((~(ptr_load_reg_1129 == 8'd92) & ~(ptr_load_reg_1129 == 8'd60) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0))) begin
        alignedA_address0 = alignedA_addr_gep_fu_316_p3;
    end else if (((ap_enable_reg_pp3_iter2 == 1'b1) & (ptr_load_reg_1129 == 8'd92) & (1'b0 == ap_block_pp3_stage0))) begin
        alignedA_address0 = alignedA_addr_1_gep_fu_299_p3;
    end else if (((ap_enable_reg_pp3_iter2 == 1'b1) & (ptr_load_reg_1129 == 8'd60) & (1'b0 == ap_block_pp3_stage0))) begin
        alignedA_address0 = b_str_idx_2_reg_417;
    end else begin
        alignedA_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (~(ptr_load_reg_1129 == 8'd92) & ~(ptr_load_reg_1129 == 8'd60) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp3_iter2 == 1'b1) & (ptr_load_reg_1129 == 8'd92) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp3_iter2 == 1'b1) & (ptr_load_reg_1129 == 8'd60) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        alignedA_ce0 = 1'b1;
    end else begin
        alignedA_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        alignedA_d0 = 8'd95;
    end else if ((~(ptr_load_reg_1129 == 8'd92) & ~(ptr_load_reg_1129 == 8'd60) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0))) begin
        alignedA_d0 = 8'd45;
    end else if ((((ap_enable_reg_pp3_iter2 == 1'b1) & (ptr_load_reg_1129 == 8'd92) & (1'b0 == ap_block_pp3_stage0)) | ((ap_enable_reg_pp3_iter2 == 1'b1) & (ptr_load_reg_1129 == 8'd60) & (1'b0 == ap_block_pp3_stage0)))) begin
        alignedA_d0 = SEQA_q0;
    end else begin
        alignedA_d0 = 'bx;
    end
end

always @ (*) begin
    if (((~(ptr_load_reg_1129 == 8'd92) & ~(ptr_load_reg_1129 == 8'd60) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp3_iter2 == 1'b1) & (ptr_load_reg_1129 == 8'd92) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp3_iter2 == 1'b1) & (ptr_load_reg_1129 == 8'd60) & (1'b0 == ap_block_pp3_stage0_11001)) | ((icmp_ln94_1_fu_907_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19)))) begin
        alignedA_we0 = 1'b1;
    end else begin
        alignedA_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        alignedB_address0 = b_str_idx_cast_fu_930_p1;
    end else if ((~(ptr_load_reg_1129 == 8'd92) & ~(ptr_load_reg_1129 == 8'd60) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0))) begin
        alignedB_address0 = alignedB_addr_gep_fu_325_p3;
    end else if (((ap_enable_reg_pp3_iter2 == 1'b1) & (ptr_load_reg_1129 == 8'd92) & (1'b0 == ap_block_pp3_stage0))) begin
        alignedB_address0 = alignedB_addr_1_gep_fu_307_p3;
    end else if (((ap_enable_reg_pp3_iter2 == 1'b1) & (ptr_load_reg_1129 == 8'd60) & (1'b0 == ap_block_pp3_stage0))) begin
        alignedB_address0 = b_str_idx_2_reg_417;
    end else begin
        alignedB_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (~(ptr_load_reg_1129 == 8'd92) & ~(ptr_load_reg_1129 == 8'd60) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp3_iter2 == 1'b1) & (ptr_load_reg_1129 == 8'd92) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp3_iter2 == 1'b1) & (ptr_load_reg_1129 == 8'd60) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        alignedB_ce0 = 1'b1;
    end else begin
        alignedB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        alignedB_d0 = 8'd95;
    end else if (((~(ptr_load_reg_1129 == 8'd92) & ~(ptr_load_reg_1129 == 8'd60) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0)) | ((ap_enable_reg_pp3_iter2 == 1'b1) & (ptr_load_reg_1129 == 8'd92) & (1'b0 == ap_block_pp3_stage0)))) begin
        alignedB_d0 = SEQB_q0;
    end else if (((ap_enable_reg_pp3_iter2 == 1'b1) & (ptr_load_reg_1129 == 8'd60) & (1'b0 == ap_block_pp3_stage0))) begin
        alignedB_d0 = 8'd45;
    end else begin
        alignedB_d0 = 'bx;
    end
end

always @ (*) begin
    if (((~(ptr_load_reg_1129 == 8'd92) & ~(ptr_load_reg_1129 == 8'd60) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp3_iter2 == 1'b1) & (ptr_load_reg_1129 == 8'd92) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp3_iter2 == 1'b1) & (ptr_load_reg_1129 == 8'd60) & (1'b0 == ap_block_pp3_stage0_11001)) | ((icmp_ln97_fu_924_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)))) begin
        alignedB_we0 = 1'b1;
    end else begin
        alignedB_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln40_reg_1021 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        ap_condition_pp3_exit_iter1_state16 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter1_state16 = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln73_fu_818_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
        ap_condition_pp3_flush_enable = 1'b1;
    end else begin
        ap_condition_pp3_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0) & (icmp_ln40_reg_1021 == 1'd0))) begin
        ap_phi_mux_a_idx_2_phi_fu_400_p4 = add_ln40_reg_1078;
    end else begin
        ap_phi_mux_a_idx_2_phi_fu_400_p4 = a_idx_2_reg_396;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (or_ln73_reg_1115_pp3_iter1_reg == 1'd1) & (1'b0 == ap_block_pp3_stage0))) begin
        ap_phi_mux_b_str_idx_2_phi_fu_427_p4 = add_ln77_reg_1124;
    end else begin
        ap_phi_mux_b_str_idx_2_phi_fu_427_p4 = b_str_idx_2_reg_417;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2) & (icmp_ln40_reg_1021_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage2))) begin
        ap_phi_mux_store_forwarded_phi_fu_411_p4 = max_reg_1083;
    end else begin
        ap_phi_mux_store_forwarded_phi_fu_411_p4 = store_forwarded_reg_408;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((ptr_q0 == 8'd92) & (ap_enable_reg_pp3_iter1 == 1'b1) & (or_ln73_reg_1115 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0)) | ((ptr_q0 == 8'd60) & (ap_enable_reg_pp3_iter1 == 1'b1) & (or_ln73_reg_1115 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0)))) begin
        ap_sig_allocacmp_a_idx_4 = grp_fu_453_p2;
    end else begin
        ap_sig_allocacmp_a_idx_4 = a_idx_1_fu_124;
    end
end

always @ (*) begin
    if (((~(ptr_q0 == 8'd92) & ~(ptr_q0 == 8'd60) & (ap_enable_reg_pp3_iter1 == 1'b1) & (or_ln73_reg_1115 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0)) | ((ptr_q0 == 8'd92) & (ap_enable_reg_pp3_iter1 == 1'b1) & (or_ln73_reg_1115 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0)))) begin
        ap_sig_allocacmp_b_idx_4 = grp_fu_463_p2;
    end else begin
        ap_sig_allocacmp_b_idx_4 = b_idx_2_fu_120;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        ptr_address0 = zext_ln75_fu_856_p1;
    end else if (((icmp_ln57_fu_784_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        ptr_address0 = ptr_addr_1_gep_fu_214_p3;
    end else if ((((icmp_ln59_fu_789_p2 == 1'd1) & (icmp_ln57_fu_784_p2 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0)) | ((icmp_ln59_fu_789_p2 == 1'd0) & (icmp_ln57_fu_784_p2 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0)))) begin
        ptr_address0 = zext_ln56_1_fu_778_p1;
    end else begin
        ptr_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln59_fu_789_p2 == 1'd1) & (icmp_ln57_fu_784_p2 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((icmp_ln59_fu_789_p2 == 1'd0) & (icmp_ln57_fu_784_p2 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((icmp_ln57_fu_784_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        ptr_ce0 = 1'b1;
    end else begin
        ptr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_400)) begin
        if ((icmp_ln57_fu_784_p2 == 1'd1)) begin
            ptr_d0 = 8'd60;
        end else if (((icmp_ln59_fu_789_p2 == 1'd1) & (icmp_ln57_fu_784_p2 == 1'd0))) begin
            ptr_d0 = 8'd94;
        end else if (((icmp_ln59_fu_789_p2 == 1'd0) & (icmp_ln57_fu_784_p2 == 1'd0))) begin
            ptr_d0 = 8'd92;
        end else begin
            ptr_d0 = 'bx;
        end
    end else begin
        ptr_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln59_fu_789_p2 == 1'd1) & (icmp_ln57_fu_784_p2 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((icmp_ln59_fu_789_p2 == 1'd0) & (icmp_ln57_fu_784_p2 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((icmp_ln57_fu_784_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        ptr_we0 = 1'b1;
    end else begin
        ptr_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln31_fu_479_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln34_fu_507_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln39_fu_553_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((1'b0 == ap_block_pp2_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_pp2_stage2 : begin
            if ((~((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage2_subdone) & (icmp_ln40_reg_1021 == 1'd1)) & (1'b0 == ap_block_pp2_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage2_subdone) & (icmp_ln40_reg_1021 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((icmp_ln94_fu_901_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((icmp_ln94_1_fu_907_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((icmp_ln97_fu_924_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_idx_2_cast6_fu_708_p1 = a_idx_2_reg_396;

assign a_idx_2_cast_fu_689_p1 = a_idx_2_reg_396;

assign a_str_idx_1_cast_fu_913_p1 = a_str_idx_1_reg_435;

assign add_ln31_fu_473_p2 = (a_idx_reg_351 + 8'd1);

assign add_ln34_fu_501_p2 = (b_idx_reg_362 + 8'd1);

assign add_ln35_fu_525_p2 = (shl_ln_fu_517_p3 + trunc_ln35_cast_fu_513_p1);

assign add_ln39_1_fu_547_p2 = (indvar_reg_373 + 8'd1);

assign add_ln39_fu_794_p2 = (b_idx_1_reg_384 + 8'd1);

assign add_ln40_fu_747_p2 = (a_idx_2_reg_396 + 8'd1);

assign add_ln41_fu_664_p2 = ($signed(ap_phi_mux_a_idx_2_phi_fu_400_p4) + $signed(8'd255));

assign add_ln50_fu_679_p2 = (zext_ln41_1_fu_675_p1 + p_cast4_reg_1000);

assign add_ln51_fu_698_p2 = (a_idx_2_cast_fu_689_p1 + p_cast4_reg_1000);

assign add_ln56_1_fu_742_p2 = (zext_ln39_reg_995 + a_idx_2_cast6_fu_708_p1);

assign add_ln56_fu_773_p2 = (zext_ln56_fu_770_p1 + p_shl1_reg_1006);

assign add_ln75_1_fu_844_p2 = (empty_39_fu_828_p1 + empty_38_fu_824_p1);

assign add_ln75_fu_850_p2 = (add_ln75_1_fu_844_p2 + shl_ln1_fu_836_p3);

assign add_ln77_fu_861_p2 = (ap_phi_mux_b_str_idx_2_phi_fu_427_p4 + 64'd1);

assign add_ln94_fu_918_p2 = (a_str_idx_1_reg_435 + 32'd1);

assign add_ln97_fu_935_p2 = (b_str_idx_reg_444 + 32'd1);

assign alignedA_addr_1_gep_fu_299_p3 = b_str_idx_2_reg_417;

assign alignedA_addr_gep_fu_316_p3 = b_str_idx_2_reg_417;

assign alignedB_addr_1_gep_fu_307_p3 = b_str_idx_2_reg_417;

assign alignedB_addr_gep_fu_325_p3 = b_str_idx_2_reg_417;

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp2_stage2 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp2_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp2_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_400 = ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0));
end

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~s_axi_rst_n;
end

assign b_str_idx_cast_fu_930_p1 = b_str_idx_reg_444;

assign empty_32_fu_563_p1 = indvar_reg_373[6:0];

assign empty_33_fu_589_p2 = (tmp_cast_fu_585_p1 + p_shl3_cast_fu_575_p1);

assign empty_34_fu_600_p2 = ($signed(b_idx_1_reg_384) + $signed(8'd255));

assign empty_35_fu_615_p1 = empty_34_fu_600_p2[6:0];

assign empty_36_fu_627_p2 = (p_shl2_fu_619_p3 + p_cast_fu_611_p1);

assign empty_38_fu_824_p1 = ap_sig_allocacmp_a_idx_4[14:0];

assign empty_39_fu_828_p1 = ap_sig_allocacmp_b_idx_4[14:0];

assign grp_fu_453_p2 = ($signed(a_idx_4_reg_1110) + $signed(32'd4294967295));

assign grp_fu_463_p2 = ($signed(b_idx_4_reg_1105) + $signed(32'd4294967295));

assign icmp_ln31_fu_479_p2 = ((a_idx_reg_351 == 8'd129) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_507_p2 = ((b_idx_reg_362 == 8'd129) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_553_p2 = ((b_idx_1_reg_384 == 8'd129) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_658_p2 = ((ap_phi_mux_a_idx_2_phi_fu_400_p4 == 8'd129) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_693_p2 = ((SEQA_q0 == SEQB_load_reg_1011) ? 1'b1 : 1'b0);

assign icmp_ln54_1_fu_758_p2 = (($signed(up_left_reg_1050) > $signed(select_ln54_fu_753_p3)) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_736_p2 = (($signed(up_fu_724_p2) > $signed(left_fu_730_p2)) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_784_p2 = ((max_fu_763_p3 == left_reg_1062) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_789_p2 = ((max_fu_763_p3 == up_reg_1056) ? 1'b1 : 1'b0);

assign icmp_ln73_1_fu_812_p2 = (($signed(ap_sig_allocacmp_b_idx_4) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_806_p2 = (($signed(ap_sig_allocacmp_a_idx_4) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln94_1_fu_907_p2 = ((a_str_idx_1_reg_435 == 32'd256) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_901_p2 = (($signed(tmp_1_fu_891_p4) < $signed(24'd1)) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_924_p2 = ((b_str_idx_reg_444 == 32'd256) ? 1'b1 : 1'b0);

assign left_fu_730_p2 = ($signed(ap_phi_mux_store_forwarded_phi_fu_411_p4) + $signed(32'd4294967295));

assign max_fu_763_p3 = ((icmp_ln54_1_fu_758_p2[0:0] == 1'b1) ? up_left_reg_1050 : select_ln54_fu_753_p3);

assign or_ln73_fu_818_p2 = (icmp_ln73_fu_806_p2 | icmp_ln73_1_fu_812_p2);

assign p_cast4_fu_647_p1 = empty_36_reg_966;

assign p_cast7_fu_595_p1 = empty_33_fu_589_p2;

assign p_cast8_fu_606_p1 = empty_34_fu_600_p2;

assign p_cast_fu_611_p1 = empty_34_fu_600_p2;

assign p_shl1_fu_650_p3 = {{b_idx_1_reg_384}, {7'd0}};

assign p_shl2_fu_619_p3 = {{empty_35_fu_615_p1}, {7'd0}};

assign p_shl3_cast_fu_575_p1 = p_shl3_fu_567_p3;

assign p_shl3_fu_567_p3 = {{empty_32_fu_563_p1}, {7'd0}};

assign ptr_addr_1_gep_fu_214_p3 = zext_ln56_1_fu_778_p1;

assign select_ln50_fu_712_p3 = ((icmp_ln41_reg_1035[0:0] == 1'b1) ? 32'd1 : 32'd4294967295);

assign select_ln54_fu_753_p3 = ((icmp_ln54_reg_1068[0:0] == 1'b1) ? up_reg_1056 : left_reg_1062);

assign sext_ln32_fu_496_p1 = $signed(sub_ln32_fu_490_p2);

assign sext_ln35_fu_542_p1 = $signed(sub_ln35_fu_536_p2);

assign shl_ln1_fu_836_p3 = {{trunc_ln74_fu_832_p1}, {7'd0}};

assign shl_ln_fu_517_p3 = {{b_idx_reg_362}, {7'd0}};

assign sub_ln32_fu_490_p2 = (8'd0 - a_idx_reg_351);

assign sub_ln35_fu_536_p2 = (8'd0 - b_idx_reg_362);

assign tmp_1_fu_891_p4 = {{b_str_idx_2_reg_417[31:8]}};

assign tmp_cast_fu_585_p1 = tmp_fu_579_p2;

assign tmp_fu_579_p2 = (zext_ln39_1_fu_559_p1 + 9'd129);

assign trunc_ln29_fu_887_p1 = b_str_idx_2_reg_417[31:0];

assign trunc_ln32_cast_fu_485_p1 = a_idx_reg_351;

assign trunc_ln35_cast_fu_513_p1 = b_idx_reg_362;

assign trunc_ln74_fu_832_p1 = ap_sig_allocacmp_b_idx_4[7:0];

assign up_fu_724_p2 = ($signed(M_q0) + $signed(32'd4294967295));

assign up_left_fu_719_p2 = (M_load_1_reg_1040 + select_ln50_fu_712_p3);

assign zext_ln35_fu_531_p1 = add_ln35_fu_525_p2;

assign zext_ln39_1_fu_559_p1 = indvar_reg_373;

assign zext_ln39_fu_643_p1 = b_idx_1_reg_384;

assign zext_ln41_1_fu_675_p1 = add_ln41_fu_664_p2;

assign zext_ln41_fu_670_p1 = add_ln41_fu_664_p2;

assign zext_ln50_fu_684_p1 = add_ln50_fu_679_p2;

assign zext_ln51_fu_703_p1 = add_ln51_fu_698_p2;

assign zext_ln56_1_fu_778_p1 = add_ln56_fu_773_p2;

assign zext_ln56_fu_770_p1 = add_ln56_1_reg_1073;

assign zext_ln75_fu_856_p1 = add_ln75_fu_850_p2;

assign zext_ln76_fu_872_p1 = grp_fu_453_p2;

assign zext_ln77_fu_877_p1 = grp_fu_463_p2;

assign zext_ln82_fu_867_p1 = grp_fu_453_p2;

assign zext_ln88_fu_882_p1 = grp_fu_463_p2;

always @ (posedge s_axi_clk) begin
    zext_ln39_reg_995[8] <= 1'b0;
    p_cast4_reg_1000[14] <= 1'b0;
    p_shl1_reg_1006[6:0] <= 7'b0000000;
    zext_ln56_1_reg_1089[63:15] <= 49'b0000000000000000000000000000000000000000000000000;
end

endmodule //needwun
