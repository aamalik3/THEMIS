/*
 * scheduler.c
 *
 *  Created on: Sep 9, 2022
 *      Author: ekarabu
 */

#include "scheduler.h"



void scheduling()
{

    workload IPs[NUM_Of_IPs];
    slot Slots[NUM_Of_SLOTs];
    uint8_t Resource[] = {1,3,1,4};
    uint8_t PR_Resource[] = {4,3,1};
	uint32_t latency[] = {1,2,4,3};

    init_IPs(IPs,Resource,latency);
    init_PRs(Slots,PR_Resource);
    int interval=0;
    while(interval<TIME_FRAME){
    	int i,j;
    	for (i=0;i<NUM_Of_SLOTs;i++){
    		reset_PRs(&Slots[i]);
    	}

    	for (i=0;i<NUM_Of_IPs;i++){

    		if (avail_slot(Slots)){
    			if (find_smallest_PR(Slots,&IPs[i]))
    				continue;
    		}
    		for (j=0;j<NUM_Of_SLOTs;j++){

    		}

    	}

    	interval++;


    }

//    int highest_IP=0;
//    int highest_priority=0;
//    int least_IP=1;
//    int least_priority=1;
//    int next=1;
//    int interval=0;
//    bool remainingSlot=true;
//
//    while(interval<18)
//    {
//    	least_priority = find_least_priority (IPs,NUM_Of_IPs, &least_IP);
//    	next=1;
//
//    	do{
//
//    		least_priority = find_least_priority (IPs,3, &least_IP);
//    		remainingSlot=avail_slot();
//
//    		if (!remainingSlot)
//    		{
//    			next=find_next_priority (IPs,3, least_IP, least_priority, highest_IP, highest_priority, &highest_IP, &highest_priority);
//    		}
//    		else
//    		{
//    			remainingSlot = remainingSlot - IPs[highest_IP].demandedResource;
//    			IPs[highest_IP].priority++;
//    			IPs[highest_IP].successRate++;
//    			highest_priority = find_highest_priority (IPs,3, &highest_IP);
//    		}
//
//
//    	}
//    	while(next && remainingSlot !=0);
//    	remainingSlot=6;
//    	interval++;
//    	highest_priority = find_highest_priority (IPs,3, &highest_IP);
//    }




}



void init_IPs(workload IPs[], uint8_t* Resource, uint32_t* latency){
	int i;
	for (i=0;i<NUM_Of_IPs;i++){
		IPs[i].demandedResource = Resource[i];
		IPs[i].latency = latency[i];
		IPs[i].executed = 0;
		IPs[i].priority = 0;
		IPs[i].successRate = 0;
	}
	char *ch = IPs[0].name;
	strcpy( ch, "hha\0" );
	strcpy( IPs[1].name, "sha\0" );
	strcpy( IPs[2].name, "fft\0" );
	strcpy( IPs[3].name, "bfs\0" );
}

void init_PRs(slot Slots[], uint8_t* Resource){
	int i;

	for (i=0;i<NUM_Of_SLOTs;i++){
		Slots[i].Resource = Resource[i];
		Slots[i].empty = true;
		Slots[i].latency = 0;
		Slots[i].PR_needed = true;
		Slots[i].interval = 0;
	}
	strcpy( Slots[0].name, '\0' );
	strcpy( Slots[1].name, '\0' );
	strcpy( Slots[2].name, '\0' );
	strcpy( Slots[3].name, '\0' );
}

void reset_PRs(slot* Slots){

	if (Slots->interval == Slots->latency)
	{
		Slots->empty = true;
		Slots->latency = 0;
		Slots->PR_needed = true;
		Slots->interval = 0;
		strcpy( Slots[0].name, "\0" );
	}

}

int find_highest_priority (workload  row[], int length, int *IP_order){
	int j;
	int priority = row[0].priority;
	int order = 0;
	for(j=1;j<length;j++) // find the highest priority in the order
	{
	    if (priority > (row[j].priority))
	    {
	    	priority =row[j].priority;
	    	order = j;
	    }
	}
	*IP_order = order;
	return priority;
}

int find_least_priority (workload  row[], int length, int *IP_order){
	int j;
	int priority = row[0].priority;
	int order = 0;
	for(j=1;j<length;j++) // find the highest priority in the order
	{
	    if (priority < (row[j].priority))
	    {
	    	priority =row[j].priority;
	    	order = j;
	    }
	}
	*IP_order = order;
	return priority;
}

bool find_smallest_PR(slot Slots[], workload *IP){
	uint8_t ipResource = IP->demandedResource;
	int i;
	int order=-1;
	for (i=0;i<NUM_Of_SLOTs;i++){
		if (Slots[i].Resource >= ipResource){
			if (Slots[i].empty == true){
				if (order == -1)
					order=i;
				else{
					if (Slots[order].Resource > Slots[i].Resource)
						order=i;
				}
			}
		}
	}
	if (order != -1){
		Slots[order].empty = false;
		Slots[order].latency = IP->latency;
		Slots[order].PR_needed = true;
		Slots[order].interval = 0;
		strcpy( Slots[order].name, IP->name );
		IP->executed = 0;
		IP->priority+= (IP->demandedResource*IP->latency);
		xil_printf("find_smallest_PR: Slot[%d] is occupied with %s priority=%d, while expected=%d*%d\n",order,IP->name,IP->priority,IP->demandedResource,IP->latency);
		return true;
	}
	else
		return false;
}

int find_next_priority (workload  row[], int length, int least_IP, int least_priority, int current_order, int current_priorty, int *IP_order, int *IP_priority){
	int j;
	int priority = least_priority;
	int order = least_IP;
	for(j=0;j<length;j++) // find the highest priority in the order
	{
	    if ((priority <= row[j].priority) && (priority >= current_priorty) && (current_order != j))
	    {
	    	priority =row[j].priority;
	    	order = j;
	    }
	}
	*IP_order = order;
	*IP_priority = priority;
	if ((priority == current_priorty) && (current_order == order))
		return 0;
	else
		return 1;
}

bool avail_slot(slot Slots[])
{
	int j;
    for(j=0;j<3;j++)
    {
    	if (Slots[j].empty == true){
    		xil_printf("avail_slot: Slot[%d] is available\n",j);
    		return true;
    	}
    }

    return false;

}

void update_slot(workload  row, slot Slots[])
{
	int j;
    for(j=0;j<3;j++)
    {
    	if (Slots[j].Resource >= row.demandedResource)
    	{
    		Slots[j].empty = true;
    		Slots[j].latency = 1;
    		strcpy( Slots[j].name, row.name );
    		break;
    	}

    }


}

void executer(int IP_number, bool PR_needed, uint8_t pblock,uint8_t messages)
{
	switch (IP_number)
	{
		case 1:
		{
			aes_256_operation	(PR_needed ,pblock,messages);
			break;
		}
		case 2:
		{
			fft_operation	(PR_needed ,pblock,messages);
			break;
		}
		case 3:
		{
			sort_operation	(PR_needed ,pblock,messages);
			break;
		}
		case 4:
		{
			sha_operation	(PR_needed ,pblock,messages);
			break;
		}
		case 5:
		{
			gemm_operation	(PR_needed ,pblock,messages);
			break;
		}
		case 6:
		{
			bfs_operation	(PR_needed ,pblock,messages);
			break;
		}
		case 7:
		{
			spmv_operation	(PR_needed ,pblock,messages);
			break;
		}
		case 8:
		{
			kmp_operation	(PR_needed ,pblock,messages);
			break;
		}
		case 9:
		{
			stencil_operation	(PR_needed ,pblock,messages);
			break;
		}
		default:
		{
			aes_256_operation	(PR_needed ,pblock,messages);
			break;
		}
	}
}
